var searchIndex = {};
searchIndex['git2'] = {"items":[[0,"","git2","# libgit2 bindings for Rust"],[1,"Blob","","A structure to represent a git [blob][1]"],[1,"Branch","","A structure to represent a git [branch][1]"],[1,"Branches","","An iterator over the branches inside of a repository."],[1,"Buf","","A structure to wrap an intermediate buffer used by libgit2."],[1,"Commit","","A structure to represent a git [commit][1]"],[1,"Parents","","An iterator over the parent commits of a commit."],[1,"Config","","A structure representing a git configuration key/value store"],[1,"ConfigEntry","","A struct representing a certain entry owned by a `Config` instance."],[1,"ConfigEntries","","An iterator over the `ConfigEntry` values of a `Config` structure."],[1,"Cred","","A structure to represent git credentials in libgit2."],[1,"CredentialHelper","","Management of the gitcredentials(7) interface."],[11,"username","","A public field representing the currently discovered username from\nconfiguration.",0],[1,"Error","","A structure to represent errors coming out of libgit2."],[1,"Index","","A structure to represent a git [index][1]"],[1,"IndexEntry","","A structure to represent an entry or a file inside of an index."],[11,"ctime","","",1],[11,"mtime","","",1],[11,"dev","","",1],[11,"ino","","",1],[11,"mode","","",1],[11,"uid","","",1],[11,"gid","","",1],[11,"file_size","","",1],[11,"id","","",1],[11,"flags","","",1],[11,"flags_extended","","",1],[11,"path","","",1],[1,"IndexEntries","","An iterator over the entries in an index"],[1,"Object","","A structure to represent a git [object][1]"],[1,"Oid","","Unique identity of any object (commit, tree, blob, tag)."],[1,"Push","","A structure to represent a pending push operation to a remote."],[1,"Status","","A status representing the result of updating a remote reference."],[11,"reference","","The reference that was updated as part of a push.",2],[11,"message","","If `None`, the reference was updated successfully, otherwise a message\nexplaining why it could not be updated is provided.",2],[1,"Reference","","A structure to represent a git [reference][1]."],[1,"References","","An iterator over the references in a repository."],[1,"ReferenceNames","","An iterator over the names of references in a repository."],[1,"Refspec","","A structure to represent a git [refspec][1]."],[1,"Remote","","A structure representing a [remote][1] of a git repository."],[1,"Refspecs","","An iterator over the refspecs that a remote contains."],[1,"RemoteCallbacks","","A structure to contain the callbacks which are invoked when a repository is\nbeing updated or downloaded."],[1,"Progress","","Struct representing the progress by an in-flight transfer."],[11,"total_objects","","Number of objects in the packfile being downloaded",3],[11,"indexed_objects","","Received objects that have been hashed",3],[11,"received_objects","","Objects which have been downloaded",3],[11,"local_objects","","Locally-available objects that have been injected in order to fix a thin\npack.",3],[11,"total_deltas","","Number of deltas in the packfile being downloaded",3],[11,"indexed_deltas","","Received deltas that have been hashed.",3],[11,"received_bytes","","Size of the packfile received up to now",3],[1,"Repository","","An owned git repository, representing all state associated with the\nunderlying filesystem."],[1,"RepositoryInitOptions","","Options which can be used to configure how a repository is initialized"],[1,"Revspec","","A revspec represents a range of revisions within a repository."],[1,"Signature","","A Signature is used to indicate authorship of various actions throughout the\nlibrary."],[1,"StringArray","","A string array structure used by libgit2"],[1,"StringArrayItems","","A forward iterator over the strings of an array, casted to `&str`."],[1,"StringArrayBytes","","A forward iterator over the strings of an array, casted to `&[u8]`."],[1,"Submodule","","A structure to represent a git [submodule][1]"],[1,"Tag","","A structure to represent a git [tag][1]"],[1,"Tree","","A structure to represent a git [tree][1]"],[1,"TreeEntry","","A structure representing an entry inside of a tree. An entry is borrowed\nfrom a tree."],[1,"CredentialType","","\nTypes of credentials that can be requested by a credential callback.\n"],[1,"IndexAddOption","","\nFlags for APIs that add files matching pathspec\n"],[2,"ErrorCode","","An enumeration of possible errors that can happen when working with a git\nrepository."],[12,"GenericError","","Generic error",4],[12,"NotFound","","Requested object could not be found",4],[12,"Exists","","Object exists preventing operation",4],[12,"Ambiguous","","More than one object matches",4],[12,"BufSize","","Output buffer too short to hold data",4],[12,"User","","Operation not allowed on bare repository",4],[12,"BareRepo","","Operation not allowed on bare repository",4],[12,"UnbornBranch","","HEAD refers to branch with no commits",4],[12,"Unmerged","","Merge in progress prevented operation",4],[12,"NotFastForward","","Reference was not fast-forwardable",4],[12,"InvalidSpec","","Name/ref spec was not in a valid format",4],[12,"MergeConflict","","Merge conflicts prevented operation",4],[12,"Locked","","Lock file prevented operation",4],[12,"Modified","","Reference value does not match expected",4],[2,"RepositoryState","","A listing of the possible states that a repository can be in."],[12,"Clean","","",5],[12,"Merge","","",5],[12,"Revert","","",5],[12,"CherryPick","","",5],[12,"Bisect","","",5],[12,"Rebase","","",5],[12,"RebaseInteractive","","",5],[12,"RebaseMerge","","",5],[12,"ApplyMailbox","","",5],[12,"ApplyMailboxOrRebase","","",5],[2,"Direction","","An enumeration of the possible directions for a remote."],[12,"Fetch","","Data will be fetched (read) from this remote.",6],[12,"Push","","Data will be pushed (written) to this remote.",6],[2,"ResetType","","An enumeration of the operations that can be performed for the `reset`\nmethod on a `Repository`."],[12,"Soft","","Move the head to the given commit.",7],[12,"Mixed","","Soft plus reset the index to the commit.",7],[12,"Hard","","Mixed plus changes in the working tree are discarded.",7],[2,"ObjectType","","An enumeration all possible kinds objects may have."],[12,"Any","","An object which corresponds to a any git object",8],[12,"Commit","","An object which corresponds to a git commit",8],[12,"Tree","","An object which corresponds to a git tree",8],[12,"Blob","","An object which corresponds to a git blob",8],[12,"Tag","","An object which corresponds to a git tag",8],[2,"BranchType","","An enumeration for the possible types of branches"],[12,"Local","","A local branch not on a remote.",9],[12,"Remote","","A branch for a remote.",9],[2,"ConfigLevel","","An enumeration of the possible priority levels of a config file."],[12,"System","","System-wide configuration file, e.g. /etc/gitconfig",10],[12,"XDG","","XDG-compatible configuration file, e.g. ~/.config/git/config",10],[12,"Global","","User-specific configuration, e.g. ~/.gitconfig",10],[12,"Local","","Reopsitory specific config, e.g. $PWD/.git/config",10],[12,"App","","Application specific configuration file",10],[12,"Highest","","Highest level available",10],[0,"build","","Builder-pattern objects for configuration various git operations."],[1,"RepoBuilder","git2::build","A builder struct which is used to build configuration for cloning a new git\nrepository."],[1,"CheckoutBuilder","","A builder struct for configuring checkouts of a repository."],[10,"clone","","",11],[10,"new","","Creates a new repository builder with all of the default configuration.",12],[10,"bare","","Indicate whether the repository will be cloned as a bare repository or\nnot.",12],[10,"branch","","Specify the name of the branch to check out after the clone.",12],[10,"signature","","Specify the identity that will be used when updating the reflog.",12],[10,"local","","Set the flag for bypassing the git aware transport mechanism for local\npaths.",12],[10,"hardlinks","","Set the flag for whether hardlinks are used when using a local git-aware\ntransport mechanism.",12],[10,"with_checkout","","Configure the checkout which will be performed by consuming a checkout\nbuilder.",12],[10,"remote_callbacks","","Set the callbacks which will be used to monitor the download progress.",12],[10,"clone","","Clone a remote repository.",12],[10,"new","","Creates a new builder for checkouts with all of its default\nconfiguration.",11],[10,"dry_run","","Indicate that this checkout should perform a dry run by checking for\nconflicts but not make any actual changes.",11],[10,"force","","Take any action necessary to get the working directory to match the\ntarget including potentially discarding modified files.",11],[10,"safe","","Indicate that the checkout should be performed safely, allowing new\nfiles to be created but not overwriting extisting files or changes.",11],[10,"allow_conflicts","","In safe mode, apply safe file updates even when there are conflicts\ninstead of canceling the checkout.",11],[10,"remove_untracked","","Remove untracked files from the working dir.",11],[10,"remove_ignored","","Remove ignored files from the working dir.",11],[10,"update_only","","Only update the contents of files that already exist.",11],[10,"update_index","","Prevents checkout from writing the updated files' information to the\nindex.",11],[10,"refresh","","Indicate whether the index and git attributes should be refreshed from\ndisk before any operations.",11],[10,"skip_unmerged","","Skip files with unmerged index entries.",11],[10,"use_ours","","Indicate whether the checkout should proceed on conflicts by using the\nstage 2 version of the file (\"ours\").",11],[10,"use_theirs","","Indicate whether the checkout should proceed on conflicts by using the\nstage 3 version of the file (\"theirs\").",11],[10,"overwrite_ignored","","Indicate whether ignored files should be overwritten during the checkout.",11],[10,"conflict_style_merge","","Indicate whether a normal merge file should be written for conflicts.",11],[10,"conflict_style_diff3","","Indicates whether to include common ancestor data in diff3 format files\nfor conflicts.",11],[10,"disable_filters","","Indicate whether to apply filters like CRLF conversion.",11],[10,"dir_perm","","Set the mode with which new directories are created.",11],[10,"file_perm","","Set the mode with which new files are created.",11],[10,"path","","Add a path to be checked out.",11],[10,"target_dir","","Set the directory to check out to",11],[10,"ancestor_label","","The name of the common ancestor side of conflicts",11],[10,"our_label","","The name of the common our side of conflicts",11],[10,"their_label","","The name of the common their side of conflicts",11],[10,"configure","","Configure a raw checkout options based on this configuration.",11],[10,"from_raw","git2","Create a new object from its raw component.",13],[10,"id","","Get the id (SHA1) of a repository blob",13],[10,"raw","","Get access to the underlying raw pointer.",13],[10,"is_binary","","Determine if the blob content is most certainly binary or not.",13],[10,"content","","Get the content of this blob.",13],[10,"drop","","",13],[10,"wrap","","Creates a new branch from a reference",14],[10,"get","","Gain access to the reference that is this branch",14],[10,"unwrap","","Take ownership of the underlying reference.",14],[10,"delete","","Delete an existing branch reference.",14],[10,"is_head","","Determine if the current local branch is pointed at by HEAD.",14],[10,"rename","","Move/rename an existing local branch reference.",14],[10,"name","","Return the name of the given local or remote branch.",14],[10,"name_bytes","","Return the name of the given local or remote branch.",14],[10,"upstream","","Return the reference supporting the remote tracking branch, given a\nlocal branch reference.",14],[10,"set_upstream","","Set the upstream configuration for a given local branch.",14],[10,"from_raw","","Creates a new iterator from the raw pointer given.",15],[10,"next","","",15],[10,"drop","","",15],[10,"new","","Creates a new empty buffer.",16],[10,"from_raw","","Creates a buffer from its raw component.",16],[10,"as_str","","Attempt to view this buffer as a string slice.",16],[10,"get","","Gain access to the contents of this buffer as a byte slice",16],[10,"raw","","Gain access to the underlying raw buffer.",16],[10,"drop","","",16],[10,"from_raw","","Create a new object from its raw component.",17],[10,"id","","Get the id (SHA1) of a repository commit",17],[10,"tree_id","","Get the id of the tree pointed to by this commit.",17],[10,"raw","","Get access to the underlying raw pointer.",17],[10,"message","","Get the full message of a commit.",17],[10,"message_bytes","","Get the full message of a commit as a byte slice.",17],[10,"message_encoding","","Get the encoding for the message of a commit, as a string representing a\nstandard encoding name.",17],[10,"message_raw","","Get the full raw message of a commit.",17],[10,"message_raw_bytes","","Get the full raw message of a commit.",17],[10,"raw_header","","Get the full raw text of the commit header.",17],[10,"raw_header_bytes","","Get the full raw text of the commit header.",17],[10,"summary","","Get the short \"summary\" of the git commit message.",17],[10,"summary_bytes","","Get the short \"summary\" of the git commit message.",17],[10,"time","","Get the commit time (i.e. committer time) of a commit.",17],[10,"parents","","Creates a new iterator over the parents of this commit.",17],[10,"author","","Get the author of this commit.",17],[10,"committer","","Get the committer of this commit.",17],[10,"amend","","Amend this existing commit with all non-`None` values",17],[10,"next","","",18],[10,"drop","","",17],[10,"new","","Allocate a new configuration object",19],[10,"open","","Create a new config instance containing a single on-disk file",19],[10,"open_default","","Open the global, XDG and system configuration files",19],[10,"find_global","","Locate the path to the global configuration file",19],[10,"find_system","","Locate the path to the system configuration file",19],[10,"find_xdg","","Locate the path to the global xdg compatible configuration file",19],[10,"from_raw","","Consumes ownership of a raw config pointer, returning a wrapped object.",19],[10,"raw","","Gain access to the underlying raw pointer of this config",19],[10,"add_file","","Add an on-disk config file instance to an existing config",19],[10,"remove","","Delete a config variable from the config file with the highest level\n(usually the local one).",19],[10,"get_bool","","Get the value of a boolean config variable.",19],[10,"get_i32","","Get the value of an integer config variable.",19],[10,"get_i64","","Get the value of an integer config variable.",19],[10,"get_str","","Get the value of a string config variable.",19],[10,"get_bytes","","Get the value of a string config variable as a byte slice.",19],[10,"get_entry","","Get the ConfigEntry for a config variable.",19],[10,"entries","","Iterate over all the config variables",19],[10,"open_global","","Open the global/XDG configuration file according to git's rules",19],[10,"open_level","","Build a single-level focused config object from a multi-level one.",19],[10,"refresh","","Reload changed config files",19],[10,"set_bool","","Set the value of a boolean config variable in the config file with the\nhighest level (usually the local one).",19],[10,"set_i32","","Set the value of an integer config variable in the config file with the\nhighest level (usually the local one).",19],[10,"set_i64","","Set the value of an integer config variable in the config file with the\nhighest level (usually the local one).",19],[10,"set_str","","Set the value of a string config variable in the config file with the\nhighest level (usually the local one).",19],[10,"snapshot","","Create a snapshot of the configuration",19],[10,"drop","","",19],[10,"from_raw","","Creates a new config entry from the raw components.",20],[10,"name","","Gets the name of this entry.",20],[10,"name_bytes","","Gets the name of this entry as a byte slice.",20],[10,"value","","Gets the value of this entry.",20],[10,"value_bytes","","Gets the value of this entry as a byte slice.",20],[10,"level","","Gets the configuration level of this entry.",20],[10,"from_raw","","Creates a new iterator from its raw component.",21],[10,"drop","","",21],[10,"from_raw","","Create a new credential object from its raw component.",22],[10,"default","","Create a \"default\" credential usable for Negotiate mechanisms like NTLM\nor Kerberos authentication.",22],[10,"ssh_key_from_agent","","Create a new ssh key credential object used for querying an ssh-agent.",22],[10,"ssh_key","","Create a new passphrase-protected ssh key credential object.",22],[10,"userpass_plaintext","","Create a new plain-text username and password credential object.",22],[10,"credential_helper","","Attempt to read `credential.helper` according to gitcredentials(7) [1]",22],[10,"has_username","","Check whether a credential object contains username information.",22],[10,"raw","","Gain access to the underlying raw credential pointer.",22],[10,"credtype","","Return the type of credentials that this object represents.",22],[10,"unwrap","","Unwrap access to the underlying raw pointer, canceling the destructor",22],[10,"drop","","",22],[10,"new","","Create a new credential helper object which will be used to probe git's\nlocal credential configuration.",0],[10,"username","","Set the username that this credential helper will query with.",0],[10,"config","","Query the specified configuration object to discover commands to\nexecute, usernames to query, etc.",0],[10,"execute","","Execute this helper, attempting to discover a username/password pair.",0],[10,"last_error","","Returns the last error, or `None` if one is not available.",23],[10,"from_str","","Creates a new error from the given string as the error.",23],[10,"code","","Return the error code associated with this error.",23],[10,"raw_code","","Return the raw error code associated with this error.",23],[10,"message","","Return the message associated with this error",23],[10,"fmt","","",23],[10,"drop","","",23],[10,"new","","Creates a new in-memory index.",24],[10,"open","","Create a new bare Git index object as a memory representation of the Git\nindex file in 'index_path', without a repository to back it.",24],[10,"from_raw","","Creates a new index from a raw pointer.",24],[10,"add","","Add or update an index entry from an in-memory struct",24],[10,"add_path","","Add or update an index entry from a file on disk",24],[10,"add_all","","Add or update index entries matching files in the working directory.",24],[10,"raw","","Get access to the underlying raw index pointer.",24],[10,"clear","","Clear the contents (all the entries) of an index object.",24],[10,"len","","Get the count of entries currently in the index",24],[10,"get","","Get one of the entries in the index by its position.",24],[10,"iter","","Get an iterator over the entries in this index.",24],[10,"get_path","","Get one of the entries in the index by its path.",24],[10,"path","","Get the full path to the index file on disk.",24],[10,"read","","Update the contents of an existing index object in memory by reading\nfrom the hard disk.",24],[10,"read_tree","","Read a tree into the index file with stats",24],[10,"remove","","Remove an entry from the index",24],[10,"remove_path","","Remove an index entry corresponding to a file on disk.",24],[10,"remove_dir","","Remove all entries from the index under a given directory.",24],[10,"remove_all","","Remove all matching index entries.",24],[10,"update_all","","Update all index entries to match the working directory",24],[10,"write","","Write an existing index object from memory back to disk using an atomic\nfile lock.",24],[10,"write_tree","","Write the index as a tree.",24],[10,"write_tree_to","","Write the index as a tree to the given repository",24],[10,"drop","","",24],[10,"next","","",25],[10,"from_raw","","Creates a new entry from its raw pointer.",1],[10,"configure","","Configures a raw git entry from this entry",1],[10,"from_raw","","Create a new object from its raw component.",26],[10,"from_raw_ptr","","Even more unsafe than `from_raw`, the output lifetime is not attached to\nany input.",26],[10,"id","","Get the id (SHA1) of a repository object",26],[10,"raw","","Get access to the underlying raw pointer.",26],[10,"kind","","Get the object type of an object.",26],[10,"peel","","Recursively peel an object until an object of the specified type is met.",26],[10,"short_id","","Get a short abbreviated OID string for the object",26],[10,"clone","","",26],[10,"drop","","",26],[10,"from_raw","","Create a new Oid from a raw libgit2 oid structure.",27],[10,"from_str","","Parse a hex-formatted object id into an Oid structure.",27],[10,"from_bytes","","Parse a raw object id into an Oid structure.",27],[10,"raw","","Gain access to the underlying raw oid pointer",27],[10,"as_bytes","","View this OID as a byte-slice 20 bytes in length.",27],[10,"fmt","","Hex-encode this Oid into a formatter.",27],[10,"eq","","",27],[10,"partial_cmp","","",27],[10,"cmp","","",27],[10,"clone","","",27],[10,"hash","","",27],[10,"from_raw","","Create a new push from its raw component.",28],[10,"raw","","Get access to the underlying raw pointer.",28],[10,"add_refspec","","Add a refspec to be pushed",28],[10,"finish","","Actually push all given refspecs",28],[10,"unpack_ok","","Check if remote side successfully unpacked",28],[10,"update_tips","","Update remote tips after a push",28],[10,"statuses","","Return each status entry",28],[10,"drop","","",28],[10,"from_raw","","Creates a new reference from a raw pointer.",29],[10,"from_raw_ptr","","Even more unsafe than `from_raw`, the output lifetime is not attached to\nany input.",29],[10,"is_valid_name","","Ensure the reference name is well-formed.",29],[10,"raw","","Get access to the underlying raw pointer.",29],[10,"delete","","Delete an existing reference.",29],[10,"is_branch","","Check if a reference is a local branch.",29],[10,"is_note","","Check if a reference is a note.",29],[10,"is_remote","","Check if a reference is a remote tracking branch",29],[10,"is_tag","","Check if a reference is a tag",29],[10,"name","","Get the full name of a reference.",29],[10,"name_bytes","","Get the full name of a reference.",29],[10,"shorthand","","Get the full shorthand of a reference.",29],[10,"shorthand_bytes","","Get the full shorthand of a reference.",29],[10,"target","","Get the OID pointed to by a direct reference.",29],[10,"target_peel","","Return the peeled OID target of this reference.",29],[10,"symbolic_target","","Get full name to the reference pointed to by a symbolic reference.",29],[10,"symbolic_target_bytes","","Get full name to the reference pointed to by a symbolic reference.",29],[10,"resolve","","Resolve a symbolic reference to a direct reference.",29],[10,"rename","","Rename an existing reference.",29],[10,"partial_cmp","","",29],[10,"cmp","","",29],[10,"eq","","",29],[10,"drop","","",29],[10,"from_raw","","Creates a new iterator from its raw underlying pointer.",30],[10,"next","","",30],[10,"drop","","",30],[10,"new","","Consumes a `References` iterator to create an iterator over just the\nname of some references.",31],[10,"next","","",31],[10,"from_raw","","Creates a new refspec from the raw components.",32],[10,"direction","","Get the refspec's direction.",32],[10,"dst","","Get the destination specifier.",32],[10,"dst_bytes","","Get the destination specifier, in bytes.",32],[10,"dst_matches","","Check if a refspec's destination descriptor matches a reference",32],[10,"src","","Get the source specifier.",32],[10,"src_bytes","","Get the source specifier, in bytes.",32],[10,"src_matches","","Check if a refspec's source descriptor matches a reference",32],[10,"is_force","","Get the force update setting.",32],[10,"str","","Get the refspec's string.",32],[10,"bytes","","Get the refspec's string as a byte array",32],[10,"from_raw","","Creates a new remote from its raw pointer.",33],[10,"is_valid_name","","Ensure the remote name is well-formed.",33],[10,"is_valid_url","","Return whether a string is a valid remote URL",33],[10,"is_supported_url","","Return whether the passed URL is supported by this version of the\nlibrary.",33],[10,"name","","Get the remote's name.",33],[10,"name_bytes","","Get the remote's name, in bytes.",33],[10,"url","","Get the remote's url.",33],[10,"url_bytes","","Get the remote's url as a byte array.",33],[10,"pushurl","","Get the remote's pushurl.",33],[10,"pushurl_bytes","","Get the remote's pushurl as a byte array.",33],[10,"connect","","Open a connection to a remote.",33],[10,"connected","","Check whether the remote is connected",33],[10,"disconnect","","Disconnect from the remote",33],[10,"save","","Save a remote to its repository's configuration",33],[10,"add_fetch","","Add a fetch refspec to the remote",33],[10,"add_push","","Add a push refspec to the remote",33],[10,"set_check_cert","","Choose whether to check the server's certificate (applies to HTTPS only)",33],[10,"set_url","","Set the remote's url",33],[10,"set_pushurl","","Set the remote's pushurl.",33],[10,"set_update_fetchhead","","Sets the update FETCH_HEAD setting. By default, FETCH_HEAD will be\nupdated on every fetch.",33],[10,"set_fetch_refspecs","","Set the remote's list of fetch refspecs",33],[10,"set_push_refspecs","","Set the remote's list of push refspecs",33],[10,"clear_refspecs","","Clear the refspecs",33],[10,"delete","","Delete an existing persisted remote.",33],[10,"download","","Download and index the packfile",33],[10,"refspecs","","Get the number of refspecs for a remote",33],[10,"rename","","Give the remote a new name",33],[10,"fetch","","Download new data and update tips",33],[10,"update_tips","","Update the tips to the new state",33],[10,"update_fetchhead","","Retrieve the update FETCH_HEAD setting.",33],[10,"push","","Create a new push object",33],[10,"set_callbacks","","Set the callbacks to be invoked when the transfer is in-progress.",33],[10,"next","","",34],[10,"clone","","",33],[10,"drop","","",33],[10,"new","","Creates a new set of empty callbacks",35],[10,"credentials","","The callback through which to fetch credentials if required.",35],[10,"transfer_progress","","The callback through which progress is monitored.",35],[10,"sideband_progress","","Textual progress from the remote.",35],[10,"raw","","Convert this set of callbacks to a raw callbacks structure.",35],[10,"open","","Attempt to open an already-existing repository at `path`.",36],[10,"discover","","Attempt to open an already-existing repository at or above `path`",36],[10,"init","","Creates a new repository in the specified folder.",36],[10,"init_bare","","Creates a new `--bare` repository in the specified folder.",36],[10,"init_opts","","Creates a new `--bare` repository in the specified folder.",36],[10,"clone","","Clone a remote repository.",36],[10,"from_raw","","Create a repository from the raw underlying pointer.",36],[10,"revparse","","Execute a rev-parse operation against the `spec` listed.",36],[10,"revparse_single","","Find a single object, as specified by a revision string.",36],[10,"is_bare","","Tests whether this repository is a bare repository or not.",36],[10,"is_shallow","","Tests whether this repository is a shallow clone.",36],[10,"is_empty","","Tests whether this repository is empty.",36],[10,"path","","Returns the path to the `.git` folder for normal repositories or the\nrepository itself for bare repositories.",36],[10,"state","","Returns the current state of this repository",36],[10,"workdir","","Get the path of the working directory for this repository.",36],[10,"namespace","","Get the currently active namespace for this repository.",36],[10,"namespace_bytes","","Get the currently active namespace for this repository as a byte array.",36],[10,"remotes","","List all remotes for a given repository",36],[10,"find_remote","","Get the information for a particular remote",36],[10,"remote","","Add a remote with the default fetch refspec to the repository's\nconfiguration.",36],[10,"remote_anonymous","","Create an anonymous remote",36],[10,"raw","","Get the underlying raw repository",36],[10,"reset","","Sets the current head to the specified object and optionally resets\nthe index and working tree to match.",36],[10,"reset_default","","Updates some entries in the index from the target commit tree.",36],[10,"head","","Retrieve and resolve the reference pointed at by HEAD.",36],[10,"references","","Create an iterator for the repo's references",36],[10,"references_glob","","Create an iterator for the repo's references that match the specified\nglob",36],[10,"submodules","","Load all submodules for this repository and return them.",36],[10,"branches","","Create an iterator which loops over the requested branches.",36],[10,"index","","Get the Index file for this repository.",36],[10,"config","","Get the configuration file for this repository.",36],[10,"blob","","Write an in-memory buffer to the ODB as a blob.",36],[10,"blob_path","","Read a file from the filesystem and write its content to the Object\nDatabase as a loose blob",36],[10,"find_blob","","Lookup a reference to one of the objects in a repository.",36],[10,"branch","","Create a new branch pointing at a target commit",36],[10,"find_branch","","Lookup a branch by its name in a repository.",36],[10,"commit","","Create new commit in the repository",36],[10,"find_commit","","Lookup a reference to one of the commits in a repository.",36],[10,"find_object","","Lookup a reference to one of the objects in a repository.",36],[10,"reference","","Create a new direct reference.",36],[10,"reference_symbolic","","Create a new symbolic reference.",36],[10,"find_reference","","Lookup a reference to one of the objects in a repository.",36],[10,"refname_to_id","","Lookup a reference by name and resolve immediately to OID.",36],[10,"signature","","Create a new action signature with default user and now timestamp.",36],[10,"submodule","","Set up a new git submodule for checkout.",36],[10,"find_submodule","","Lookup submodule information by name or path.",36],[10,"find_tree","","Lookup a reference to one of the objects in a repository.",36],[10,"tag","","Create a new tag in the repository from an object",36],[10,"find_tag","","Lookup a tag object from the repository.",36],[10,"tag_delete","","Delete an existing tag reference.",36],[10,"tag_names","","Get a list with all the tags in the repository.",36],[10,"checkout_head","","Updates files in the index and the working tree to match the content of\nthe commit pointed at by HEAD.",36],[10,"checkout_index","","Updates files in the working tree to match the content of the index.",36],[10,"checkout_tree","","Updates files in the index and working tree to match the content of the\ntree pointed at by the treeish.",36],[10,"drop","","",36],[10,"new","","Creates a default set of initialization options.",37],[10,"bare","","Create a bare repository with no working directory.",37],[10,"no_reinit","","Return an error if the repository path appears to already be a git\nrepository.",37],[10,"no_dotgit_dir","","Normally a '/.git/' will be appended to the repo apth for non-bare repos\n(if it is not already there), but passing this flag prevents that\nbehavior.",37],[10,"mkdir","","Make the repo path (and workdir path) as needed. The \".git\" directory\nwill always be created regardless of this flag.",37],[10,"mkpath","","Recursively make all components of the repo and workdir path sas\nnecessary.",37],[10,"external_template","","Enable or disable using external templates.",37],[10,"workdir_path","","The path do the working directory.",37],[10,"description","","If set, this will be used to initialize the \"description\" file in the\nrepository instead of using the template content.",37],[10,"template_path","","When the `external_template` option is set, this is the first location\nto check for the template directory.",37],[10,"initial_head","","The name of the head to point HEAD at.",37],[10,"origin_url","","If set, then after the rest of the repository initialization is\ncompleted an `origin` remote will be added pointing to this URL.",37],[10,"raw","","Creates a set of raw init options to be used with\n`git_repository_init_ext`.",37],[10,"from_objects","","Assembles a new revspec from the from/to components.",38],[10,"from","","Access the `from` range of this revspec.",38],[10,"to","","Access the `to` range of this revspec.",38],[10,"now","","Create a new action signature with a timestamp of 'now'.",39],[10,"new","","Create a new action signature.",39],[10,"from_raw","","Consumes ownership of a raw signature pointer",39],[10,"from_raw_const","","Creates a new signature from the give raw pointer, tied to the lifetime\nof the given object.",39],[10,"name","","Gets the name on the signature.",39],[10,"name_bytes","","Gets the name on the signature as a byte slice.",39],[10,"email","","Gets the email on the signature.",39],[10,"email_bytes","","Gets the email on the signature as a byte slice.",39],[10,"when","","Get the `when` of this signature in seconds since the epoch.",39],[10,"when_offset","","Get the offset of `when`, in minutes, of the signature's time zone from\nUTC.",39],[10,"raw","","Get access to the underlying raw signature",39],[10,"clone","","",39],[10,"drop","","",39],[10,"from_raw","","Creates a new string array from the raw representation.",40],[10,"get","","Returns None if the i'th string is not utf8 or if i is out of bounds.",40],[10,"get_bytes","","Returns None if `i` is out of bounds.",40],[10,"iter","","Returns an iterator over the strings contained within this array.",40],[10,"iter_bytes","","Returns an iterator over the strings contained within this array,\nyielding byte slices.",40],[10,"len","","Returns the number of strings in this array.",40],[10,"next","","",41],[10,"next","","",42],[10,"drop","","",40],[10,"from_raw","","Create a new object from its raw component.",43],[10,"branch","","Get the submodule's branch.",43],[10,"branch_bytes","","Get the branch for the submodule.",43],[10,"url","","Get the submodule's url.",43],[10,"url_bytes","","Get the url for the submodule.",43],[10,"name","","Get the submodule's name.",43],[10,"name_bytes","","Get the name for the submodule.",43],[10,"path","","Get the path for the submodule.",43],[10,"head_id","","Get the OID for the submodule in the current HEAD tree.",43],[10,"index_id","","Get the OID for the submodule in the index.",43],[10,"workdir_id","","Get the OID for the submodule in the current working directory.",43],[10,"init","","Copy submodule info into \".git/config\" file.",43],[10,"open","","Open the repository for a submodule.",43],[10,"raw","","Access the underlying raw git submodule pointer.",43],[10,"reload","","Reread submodule info from config, index, and HEAD.",43],[10,"save","","Write submodule settings to .gitmodules file.",43],[10,"sync","","Copy submodule remote info into submodule repo.",43],[10,"add_to_index","","Add current submodule HEAD commit to index of superproject.",43],[10,"add_finalize","","Resolve the setup of a new git submodule.",43],[10,"drop","","",43],[10,"from_raw","","Create a new tag from its raw component.",44],[10,"id","","Get the id (SHA1) of a repository tag",44],[10,"message","","Get the message of a tag",44],[10,"message_bytes","","Get the message of a tag",44],[10,"name","","Get the name of a tag",44],[10,"name_bytes","","Get the name of a tag",44],[10,"peel","","Recursively peel a tag until a non tag git_object is found",44],[10,"tagger","","Get the tagger (author) of a tag",44],[10,"target","","Get the tagged object of a tag",44],[10,"target_id","","Get the OID of the tagged object of a tag",44],[10,"target_type","","Get the OID of the tagged object of a tag",44],[10,"raw","","Get access to the underlying raw pointer.",44],[10,"drop","","",44],[10,"from_raw","","Create a new object from its raw component.",45],[10,"id","","Get the id (SHA1) of a repository object",45],[10,"raw","","Get access to the underlying raw pointer.",45],[10,"len","","Get the number of entries listed in this tree.",45],[10,"get_id","","Lookup a tree entry by SHA value.",45],[10,"get","","Lookup a tree entry by its position in the tree",45],[10,"get_name","","Lookup a tree entry by its filename",45],[10,"get_path","","Retrieve a tree entry contained in a tree or in any of its subtrees,\ngiven its relative path.",45],[10,"drop","","",45],[10,"from_raw_const","","Create a new tree entry from the raw pointer provided.",46],[10,"from_raw","","Create a new tree entry from the raw pointer provided.",46],[10,"raw","","Gain access to the underlying raw pointer for this tree entry.",46],[10,"id","","Get the id of the object pointed by the entry",46],[10,"name","","Get the filename of a tree entry",46],[10,"name_bytes","","Get the filename of a tree entry",46],[10,"to_object","","Convert a tree entry to the object it points to.",46],[10,"kind","","Get the type of the object pointed by the entry",46],[10,"filemode","","Get the UNIX file attributes of a tree entry",46],[10,"filemode_raw","","Get the raw UNIX file attributes of a tree entry",46],[10,"clone","","",46],[10,"partial_cmp","","",46],[10,"cmp","","",46],[10,"eq","","",46],[10,"drop","","",46],[4,"IndexMatchedPath","",""],[4,"Credentials","","Callback used to acquire credentials for when a remote is fetched."],[4,"TransferProgress","","Callback to be invoked while a transfer is in progress."],[4,"TransportMessage","","Callback for receiving messages delivered by the transport."],[18,"USER_PASS_PLAINTEXT","",""],[18,"SSH_KEY","",""],[18,"SSH_CUSTOM","",""],[18,"DEFAULT","",""],[18,"SSH_INTERACTIVE","",""],[18,"ADD_DEFAULT","",""],[18,"ADD_FORCE","",""],[18,"ADD_DISABLE_PATHSPEC_MATCH","",""],[18,"ADD_CHECK_PATHSPEC","",""],[10,"fmt","","",4],[10,"clone","","",4],[10,"eq","","",4],[10,"ne","","",4],[10,"fmt","","",5],[10,"clone","","",5],[10,"eq","","",5],[10,"ne","","",5],[10,"eq","","",8],[10,"ne","","",8],[10,"fmt","","",9],[10,"eq","","",9],[10,"ne","","",9],[10,"fmt","","",10],[10,"eq","","",10],[10,"ne","","",10],[10,"hash","","",47],[10,"cmp","","",47],[10,"partial_cmp","","",47],[10,"lt","","",47],[10,"le","","",47],[10,"gt","","",47],[10,"ge","","",47],[10,"clone","","",47],[10,"eq","","",47],[10,"ne","","",47],[10,"empty","","Returns an empty set of flags.",47],[10,"all","","Returns the set containing all flags.",47],[10,"bits","","Returns the raw value of the flags currently stored.",47],[10,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",47],[10,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",47],[10,"is_empty","","Returns `true` if no flags are currently stored.",47],[10,"is_all","","Returns `true` if all flags are currently set.",47],[10,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",47],[10,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",47],[10,"insert","","Inserts the specified flags in-place.",47],[10,"remove","","Removes the specified flags in-place.",47],[10,"toggle","","Toggles the specified flags in-place.",47],[10,"bitor","","Returns the union of the two sets of flags.",47],[10,"bitxor","","Returns the left flags, but with all the right flags toggled.",47],[10,"bitand","","Returns the intersection between the two sets of flags.",47],[10,"sub","","Returns the set difference of the two sets of flags.",47],[10,"not","","Returns the complement of this set of flags.",47],[10,"hash","","",48],[10,"cmp","","",48],[10,"partial_cmp","","",48],[10,"lt","","",48],[10,"le","","",48],[10,"gt","","",48],[10,"ge","","",48],[10,"clone","","",48],[10,"eq","","",48],[10,"ne","","",48],[10,"empty","","Returns an empty set of flags.",48],[10,"all","","Returns the set containing all flags.",48],[10,"bits","","Returns the raw value of the flags currently stored.",48],[10,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",48],[10,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",48],[10,"is_empty","","Returns `true` if no flags are currently stored.",48],[10,"is_all","","Returns `true` if all flags are currently set.",48],[10,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",48],[10,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",48],[10,"insert","","Inserts the specified flags in-place.",48],[10,"remove","","Removes the specified flags in-place.",48],[10,"toggle","","Toggles the specified flags in-place.",48],[10,"bitor","","Returns the union of the two sets of flags.",48],[10,"bitxor","","Returns the left flags, but with all the right flags toggled.",48],[10,"bitand","","Returns the intersection between the two sets of flags.",48],[10,"sub","","Returns the set difference of the two sets of flags.",48],[10,"not","","Returns the complement of this set of flags.",48],[10,"str","","Convert an object type to its string representation.",8],[10,"is_loose","","Determine if the given git_otype is a valid loose object type.",8],[10,"from_raw","","Convert a raw git_otype to an ObjectType",8],[10,"raw","","Convert this kind into its raw representation",8],[10,"from_str","","Convert a string object type representation to its object type.",8],[10,"fmt","","",8],[10,"from_raw","","Converts a raw configuration level to a ConfigLevel",10]],"paths":[[1,"CredentialHelper"],[1,"IndexEntry"],[1,"Status"],[1,"Progress"],[2,"ErrorCode"],[2,"RepositoryState"],[2,"Direction"],[2,"ResetType"],[2,"ObjectType"],[2,"BranchType"],[2,"ConfigLevel"],[1,"CheckoutBuilder"],[1,"RepoBuilder"],[1,"Blob"],[1,"Branch"],[1,"Branches"],[1,"Buf"],[1,"Commit"],[1,"Parents"],[1,"Config"],[1,"ConfigEntry"],[1,"ConfigEntries"],[1,"Cred"],[1,"Error"],[1,"Index"],[1,"IndexEntries"],[1,"Object"],[1,"Oid"],[1,"Push"],[1,"Reference"],[1,"References"],[1,"ReferenceNames"],[1,"Refspec"],[1,"Remote"],[1,"Refspecs"],[1,"RemoteCallbacks"],[1,"Repository"],[1,"RepositoryInitOptions"],[1,"Revspec"],[1,"Signature"],[1,"StringArray"],[1,"StringArrayItems"],[1,"StringArrayBytes"],[1,"Submodule"],[1,"Tag"],[1,"Tree"],[1,"TreeEntry"],[1,"CredentialType"],[1,"IndexAddOption"]]};
searchIndex['libgit2-sys'] = {"items":[[0,"","libgit2-sys",""],[1,"git_revspec","",""],[11,"from","","",0],[11,"to","","",0],[11,"flags","","",0],[1,"git_error","",""],[11,"message","","",1],[11,"klass","","",1],[1,"git_oid","",""],[11,"id","","",2],[1,"git_strarray","",""],[11,"strings","","",3],[11,"count","","",3],[1,"git_signature","",""],[11,"name","","",4],[11,"email","","",4],[11,"when","","",4],[1,"git_time","",""],[11,"time","","",5],[11,"offset","","",5],[1,"git_revparse_mode_t","",""],[1,"git_clone_options","",""],[11,"version","","",6],[11,"checkout_opts","","",6],[11,"remote_callbacks","","",6],[11,"bare","","",6],[11,"local","","",6],[11,"checkout_branch","","",6],[11,"signature","","",6],[11,"repository_cb","","",6],[11,"repository_cb_payload","","",6],[11,"remote_cb","","",6],[11,"remote_cb_payload","","",6],[1,"git_checkout_options","",""],[11,"version","","",7],[11,"checkout_strategy","","",7],[11,"disable_filters","","",7],[11,"dir_mode","","",7],[11,"file_mode","","",7],[11,"file_open_flags","","",7],[11,"notify_flags","","",7],[11,"notify_cb","","",7],[11,"notify_payload","","",7],[11,"progress_cb","","",7],[11,"progress_payload","","",7],[11,"paths","","",7],[11,"baseline","","",7],[11,"target_directory","","",7],[11,"ancestor_label","","",7],[11,"our_label","","",7],[11,"their_label","","",7],[1,"git_remote_callbacks","",""],[11,"version","","",8],[11,"sideband_progress","","",8],[11,"completion","","",8],[11,"credentials","","",8],[11,"transfer_progress","","",8],[11,"update_tips","","",8],[11,"payload","","",8],[1,"git_transfer_progress","",""],[11,"total_objects","","",9],[11,"indexed_objects","","",9],[11,"received_objects","","",9],[11,"local_objects","","",9],[11,"total_deltas","","",9],[11,"indexed_deltas","","",9],[11,"received_bytes","","",9],[1,"git_diff_file","",""],[11,"id","","",10],[11,"path","","",10],[11,"size","","",10],[11,"flags","","",10],[11,"mode","","",10],[1,"git_buf","",""],[11,"ptr","","",11],[11,"asize","","",11],[11,"size","","",11],[1,"git_index_entry","",""],[11,"ctime","","",12],[11,"mtime","","",12],[11,"dev","","",12],[11,"ino","","",12],[11,"mode","","",12],[11,"uid","","",12],[11,"gid","","",12],[11,"file_size","","",12],[11,"id","","",12],[11,"flags","","",12],[11,"flags_extended","","",12],[11,"path","","",12],[1,"git_index_time","",""],[11,"seconds","","",13],[11,"nanoseconds","","",13],[1,"git_config_entry","",""],[11,"name","","",14],[11,"value","","",14],[11,"level","","",14],[1,"git_cred","",""],[11,"credtype","","",15],[11,"free","","",15],[1,"git_push_options","",""],[11,"version","","",16],[11,"pb_parallelism","","",16],[1,"git_repository_init_options","",""],[11,"version","","",17],[11,"flags","","",17],[11,"mode","","",17],[11,"workdir_path","","",17],[11,"description","","",17],[11,"template_path","","",17],[11,"initial_head","","",17],[11,"origin_url","","",17],[2,"git_blob","",""],[2,"git_branch_iterator","",""],[2,"git_commit","",""],[2,"git_config","",""],[2,"git_config_iterator","",""],[2,"git_index","",""],[2,"git_object","",""],[2,"git_reference","",""],[2,"git_reference_iterator","",""],[2,"git_refspec","",""],[2,"git_remote","",""],[2,"git_repository","",""],[2,"git_submodule","",""],[2,"git_tag","",""],[2,"git_tree","",""],[2,"git_tree_entry","",""],[2,"git_push","",""],[2,"git_error_code","",""],[12,"GIT_OK","","",18],[12,"GIT_ERROR","","",18],[12,"GIT_ENOTFOUND","","",18],[12,"GIT_EEXISTS","","",18],[12,"GIT_EAMBIGUOUS","","",18],[12,"GIT_EBUFS","","",18],[12,"GIT_EUSER","","",18],[12,"GIT_EBAREREPO","","",18],[12,"GIT_EUNBORNBRANCH","","",18],[12,"GIT_EUNMERGED","","",18],[12,"GIT_ENONFASTFORWARD","","",18],[12,"GIT_EINVALIDSPEC","","",18],[12,"GIT_EMERGECONFLICT","","",18],[12,"GIT_ELOCKED","","",18],[12,"GIT_EMODIFIED","","",18],[12,"GIT_PASSTHROUGH","","",18],[12,"GIT_ITEROVER","","",18],[2,"git_repository_state_t","",""],[12,"GIT_REPOSITORY_STATE_NONE","","",19],[12,"GIT_REPOSITORY_STATE_MERGE","","",19],[12,"GIT_REPOSITORY_STATE_REVERT","","",19],[12,"GIT_REPOSITORY_STATE_CHERRYPICK","","",19],[12,"GIT_REPOSITORY_STATE_BISECT","","",19],[12,"GIT_REPOSITORY_STATE_REBASE","","",19],[12,"GIT_REPOSITORY_STATE_REBASE_INTERACTIVE","","",19],[12,"GIT_REPOSITORY_STATE_REBASE_MERGE","","",19],[12,"GIT_REPOSITORY_STATE_APPLY_MAILBOX","","",19],[12,"GIT_REPOSITORY_STATE_APPLY_MAILBOX_OR_REBASE","","",19],[2,"git_direction","",""],[12,"GIT_DIRECTION_FETCH","","",20],[12,"GIT_DIRECTION_PUSH","","",20],[2,"git_clone_local_t","",""],[12,"GIT_CLONE_LOCAL_AUTO","","",21],[12,"GIT_CLONE_LOCAL","","",21],[12,"GIT_CLONE_NO_LOCAL","","",21],[12,"GIT_CLONE_LOCAL_NO_LINKS","","",21],[2,"git_remote_completion_type","",""],[12,"GIT_REMOTE_COMPLETION_DOWNLOAD","","",22],[12,"GIT_REMOTE_COMPLETION_INDEXING","","",22],[12,"GIT_REMOTE_COMPLETION_ERROR","","",22],[2,"git_checkout_notify_t","",""],[12,"GIT_CHECKOUT_NOTIFY_NONE","","",23],[12,"GIT_CHECKOUT_NOTIFY_CONFLICT","","",23],[12,"GIT_CHECKOUT_NOTIFY_DIRTY","","",23],[12,"GIT_CHECKOUT_NOTIFY_UPDATED","","",23],[12,"GIT_CHECKOUT_NOTIFY_UNTRACKED","","",23],[12,"GIT_CHECKOUT_NOTIFY_IGNORED","","",23],[12,"GIT_CHECKOUT_NOTIFY_ALL","","",23],[2,"git_checkout_strategy_t","",""],[12,"GIT_CHECKOUT_NONE","","",24],[12,"GIT_CHECKOUT_SAFE","","",24],[12,"GIT_CHECKOUT_SAFE_CREATE","","",24],[12,"GIT_CHECKOUT_FORCE","","",24],[12,"GIT_CHECKOUT_ALLOW_CONFLICTS","","",24],[12,"GIT_CHECKOUT_REMOVE_UNTRACKED","","",24],[12,"GIT_CHECKOUT_REMOVE_IGNORED","","",24],[12,"GIT_CHECKOUT_UPDATE_ONLY","","",24],[12,"GIT_CHECKOUT_DONT_UPDATE_INDEX","","",24],[12,"GIT_CHECKOUT_NO_REFRESH","","",24],[12,"GIT_CHECKOUT_SKIP_UNMERGED","","",24],[12,"GIT_CHECKOUT_USE_OURS","","",24],[12,"GIT_CHECKOUT_USE_THEIRS","","",24],[12,"GIT_CHECKOUT_DISABLE_PATHSPEC_MATCH","","",24],[12,"GIT_CHECKOUT_SKIP_LOCKED_DIRECTORIES","","",24],[12,"GIT_CHECKOUT_DONT_OVERWRITE_IGNORED","","",24],[12,"GIT_CHECKOUT_CONFLICT_STYLE_MERGE","","",24],[12,"GIT_CHECKOUT_CONFLICT_STYLE_DIFF3","","",24],[12,"GIT_CHECKOUT_UPDATE_SUBMODULES","","",24],[12,"GIT_CHECKOUT_UPDATE_SUBMODULES_IF_CHANGED","","",24],[2,"git_reset_t","",""],[12,"GIT_RESET_SOFT","","",25],[12,"GIT_RESET_MIXED","","",25],[12,"GIT_RESET_HARD","","",25],[2,"git_otype","",""],[12,"GIT_OBJ_ANY","","",26],[12,"GIT_OBJ_BAD","","",26],[12,"GIT_OBJ__EXT1","","",26],[12,"GIT_OBJ_COMMIT","","",26],[12,"GIT_OBJ_TREE","","",26],[12,"GIT_OBJ_BLOB","","",26],[12,"GIT_OBJ_TAG","","",26],[12,"GIT_OBJ__EXT2","","",26],[12,"GIT_OBJ_OFS_DELTA","","",26],[12,"GIT_OBJ_REF_DELTA","","",26],[2,"git_ref_t","",""],[12,"GIT_REF_INVALID","","",27],[12,"GIT_REF_OID","","",27],[12,"GIT_REF_SYMBOLIC","","",27],[12,"GIT_REF_LISTALL","","",27],[2,"git_filemode_t","",""],[12,"GIT_FILEMODE_UNREADABLE","","",28],[12,"GIT_FILEMODE_TREE","","",28],[12,"GIT_FILEMODE_BLOB","","",28],[12,"GIT_FILEMODE_BLOB_EXECUTABLE","","",28],[12,"GIT_FILEMODE_LINK","","",28],[12,"GIT_FILEMODE_COMMIT","","",28],[2,"git_treewalk_mode","",""],[12,"GIT_TREEWALK_PRE","","",29],[12,"GIT_TREEWALK_POST","","",29],[2,"git_branch_t","",""],[12,"GIT_BRANCH_LOCAL","","",30],[12,"GIT_BRANCH_REMOTE","","",30],[12,"GIT_BRANCH_ALL","","",30],[2,"git_config_level_t","",""],[12,"GIT_CONFIG_LEVEL_SYSTEM","","",31],[12,"GIT_CONFIG_LEVEL_XDG","","",31],[12,"GIT_CONFIG_LEVEL_GLOBAL","","",31],[12,"GIT_CONFIG_LEVEL_LOCAL","","",31],[12,"GIT_CONFIG_LEVEL_APP","","",31],[12,"GIT_CONFIG_HIGHEST_LEVEL","","",31],[2,"git_submodule_update_t","",""],[12,"GIT_SUBMODULE_UPDATE_RESET","","",32],[12,"GIT_SUBMODULE_UPDATE_CHECKOUT","","",32],[12,"GIT_SUBMODULE_UPDATE_REBASE","","",32],[12,"GIT_SUBMODULE_UPDATE_MERGE","","",32],[12,"GIT_SUBMODULE_UPDATE_NONE","","",32],[12,"GIT_SUBMODULE_UPDATE_DEFAULT","","",32],[2,"git_submodule_ignore_t","",""],[12,"GIT_SUBMODULE_IGNORE_RESET","","",33],[12,"GIT_SUBMODULE_IGNORE_NONE","","",33],[12,"GIT_SUBMODULE_IGNORE_UNTRACKED","","",33],[12,"GIT_SUBMODULE_IGNORE_DIRTY","","",33],[12,"GIT_SUBMODULE_IGNORE_ALL","","",33],[12,"GIT_SUBMODULE_IGNORE_DEFAULT","","",33],[2,"git_credtype_t","",""],[12,"GIT_CREDTYPE_USERPASS_PLAINTEXT","","",34],[12,"GIT_CREDTYPE_SSH_KEY","","",34],[12,"GIT_CREDTYPE_SSH_CUSTOM","","",34],[12,"GIT_CREDTYPE_DEFAULT","","",34],[12,"GIT_CREDTYPE_SSH_INTERACTIVE","","",34],[2,"LIBSSH2_SESSION","",""],[2,"LIBSSH2_USERAUTH_KBDINT_PROMPT","",""],[2,"LIBSSH2_USERAUTH_KBDINT_RESPONSE","",""],[2,"git_index_add_option_t","",""],[12,"GIT_INDEX_ADD_DEFAULT","","",35],[12,"GIT_INDEX_ADD_FORCE","","",35],[12,"GIT_INDEX_ADD_DISABLE_PATHSPEC_MATCH","","",35],[12,"GIT_INDEX_ADD_CHECK_PATHSPEC","","",35],[2,"git_repository_init_flag_t","",""],[12,"GIT_REPOSITORY_INIT_BARE","","",36],[12,"GIT_REPOSITORY_INIT_NO_REINIT","","",36],[12,"GIT_REPOSITORY_INIT_NO_DOTGIT_DIR","","",36],[12,"GIT_REPOSITORY_INIT_MKDIR","","",36],[12,"GIT_REPOSITORY_INIT_MKPATH","","",36],[12,"GIT_REPOSITORY_INIT_EXTERNAL_TEMPLATE","","",36],[2,"git_repository_init_mode_t","",""],[12,"GIT_REPOSITORY_INIT_SHARED_UMASK","","",37],[12,"GIT_REPOSITORY_INIT_SHARED_GROUP","","",37],[12,"GIT_REPOSITORY_INIT_SHARED_ALL","","",37],[3,"openssl_init","","Initialize openssl for the libgit2 library"],[3,"issue_14344_workaround","",""],[13,"git_threads_init","",""],[13,"git_threads_shutdown","",""],[13,"git_repository_free","",""],[13,"git_repository_open","",""],[13,"git_repository_init","",""],[13,"git_repository_init_ext","",""],[13,"git_repository_init_init_options","",""],[13,"git_repository_get_namespace","",""],[13,"git_repository_head","",""],[13,"git_repository_is_bare","",""],[13,"git_repository_is_empty","",""],[13,"git_repository_is_shallow","",""],[13,"git_repository_path","",""],[13,"git_repository_state","",""],[13,"git_repository_workdir","",""],[13,"git_repository_index","",""],[13,"git_repository_config","",""],[13,"git_repository_config_snapshot","",""],[13,"git_repository_discover","",""],[13,"git_revparse","",""],[13,"git_revparse_single","",""],[13,"git_object_dup","",""],[13,"git_object_id","",""],[13,"git_object_free","",""],[13,"git_object_lookup","",""],[13,"git_object_type","",""],[13,"git_object_peel","",""],[13,"git_object_short_id","",""],[13,"git_object_type2string","",""],[13,"git_object_string2type","",""],[13,"git_object_typeisloose","",""],[13,"git_oid_fromraw","",""],[13,"git_oid_fromstrn","",""],[13,"git_oid_tostr","",""],[13,"git_oid_cmp","",""],[13,"git_oid_equal","",""],[13,"git_oid_streq","",""],[13,"giterr_last","",""],[13,"giterr_clear","",""],[13,"giterr_detach","",""],[13,"git_remote_create","",""],[13,"git_remote_load","",""],[13,"git_remote_create_anonymous","",""],[13,"git_remote_delete","",""],[13,"git_remote_free","",""],[13,"git_remote_name","",""],[13,"git_remote_pushurl","",""],[13,"git_remote_refspec_count","",""],[13,"git_remote_url","",""],[13,"git_remote_connect","",""],[13,"git_remote_connected","",""],[13,"git_remote_disconnect","",""],[13,"git_remote_save","",""],[13,"git_remote_add_fetch","",""],[13,"git_remote_add_push","",""],[13,"git_remote_check_cert","",""],[13,"git_remote_clear_refspecs","",""],[13,"git_remote_download","",""],[13,"git_remote_dup","",""],[13,"git_remote_get_fetch_refspecs","",""],[13,"git_remote_get_refspec","",""],[13,"git_remote_is_valid_name","",""],[13,"git_remote_valid_url","",""],[13,"git_remote_supported_url","",""],[13,"git_remote_list","",""],[13,"git_remote_rename","",""],[13,"git_remote_fetch","",""],[13,"git_remote_update_tips","",""],[13,"git_remote_update_fetchhead","",""],[13,"git_remote_set_url","",""],[13,"git_remote_set_pushurl","",""],[13,"git_remote_set_update_fetchhead","",""],[13,"git_remote_set_fetch_refspecs","",""],[13,"git_remote_set_push_refspecs","",""],[13,"git_remote_set_callbacks","",""],[13,"git_remote_init_callbacks","",""],[13,"git_refspec_direction","",""],[13,"git_refspec_dst","",""],[13,"git_refspec_dst_matches","",""],[13,"git_refspec_src","",""],[13,"git_refspec_src_matches","",""],[13,"git_refspec_force","",""],[13,"git_refspec_string","",""],[13,"git_strarray_free","",""],[13,"git_signature_default","",""],[13,"git_signature_free","",""],[13,"git_signature_new","",""],[13,"git_signature_now","",""],[13,"git_signature_dup","",""],[13,"git_clone","",""],[13,"git_clone_init_options","",""],[13,"git_reset","",""],[13,"git_reset_default","",""],[13,"git_reference_cmp","",""],[13,"git_reference_delete","",""],[13,"git_reference_free","",""],[13,"git_reference_is_branch","",""],[13,"git_reference_is_note","",""],[13,"git_reference_is_remote","",""],[13,"git_reference_is_tag","",""],[13,"git_reference_is_valid_name","",""],[13,"git_reference_lookup","",""],[13,"git_reference_name","",""],[13,"git_reference_name_to_id","",""],[13,"git_reference_rename","",""],[13,"git_reference_resolve","",""],[13,"git_reference_shorthand","",""],[13,"git_reference_symbolic_target","",""],[13,"git_reference_target","",""],[13,"git_reference_target_peel","",""],[13,"git_reference_type","",""],[13,"git_reference_iterator_new","",""],[13,"git_reference_iterator_glob_new","",""],[13,"git_reference_iterator_free","",""],[13,"git_reference_next","",""],[13,"git_reference_next_name","",""],[13,"git_reference_create","",""],[13,"git_reference_symbolic_create","",""],[13,"git_submodule_add_finalize","",""],[13,"git_submodule_add_setup","",""],[13,"git_submodule_add_to_index","",""],[13,"git_submodule_branch","",""],[13,"git_submodule_foreach","",""],[13,"git_submodule_free","",""],[13,"git_submodule_head_id","",""],[13,"git_submodule_index_id","",""],[13,"git_submodule_init","",""],[13,"git_submodule_location","",""],[13,"git_submodule_lookup","",""],[13,"git_submodule_name","",""],[13,"git_submodule_open","",""],[13,"git_submodule_path","",""],[13,"git_submodule_reload","",""],[13,"git_submodule_reload_all","",""],[13,"git_submodule_save","",""],[13,"git_submodule_set_ignore","",""],[13,"git_submodule_set_update","",""],[13,"git_submodule_set_url","",""],[13,"git_submodule_sync","",""],[13,"git_submodule_update","",""],[13,"git_submodule_url","",""],[13,"git_submodule_wd_id","",""],[13,"git_blob_free","",""],[13,"git_blob_id","",""],[13,"git_blob_is_binary","",""],[13,"git_blob_lookup","",""],[13,"git_blob_lookup_prefix","",""],[13,"git_blob_rawcontent","",""],[13,"git_blob_rawsize","",""],[13,"git_blob_create_frombuffer","",""],[13,"git_blob_create_fromdisk","",""],[13,"git_blob_create_fromworkdir","",""],[13,"git_tree_entry_byid","",""],[13,"git_tree_entry_byindex","",""],[13,"git_tree_entry_byname","",""],[13,"git_tree_entry_bypath","",""],[13,"git_tree_entry_cmp","",""],[13,"git_tree_entry_dup","",""],[13,"git_tree_entry_filemode","",""],[13,"git_tree_entry_filemode_raw","",""],[13,"git_tree_entry_free","",""],[13,"git_tree_entry_id","",""],[13,"git_tree_entry_name","",""],[13,"git_tree_entry_to_object","",""],[13,"git_tree_entry_type","",""],[13,"git_tree_entrycount","",""],[13,"git_tree_free","",""],[13,"git_tree_id","",""],[13,"git_tree_lookup","",""],[13,"git_tree_walk","",""],[13,"git_buf_free","",""],[13,"git_buf_grow","",""],[13,"git_buf_set","",""],[13,"git_commit_author","",""],[13,"git_commit_committer","",""],[13,"git_commit_free","",""],[13,"git_commit_id","",""],[13,"git_commit_lookup","",""],[13,"git_commit_message","",""],[13,"git_commit_message_encoding","",""],[13,"git_commit_message_raw","",""],[13,"git_commit_nth_gen_ancestor","",""],[13,"git_commit_parent","",""],[13,"git_commit_parent_id","",""],[13,"git_commit_parentcount","",""],[13,"git_commit_raw_header","",""],[13,"git_commit_summary","",""],[13,"git_commit_time","",""],[13,"git_commit_time_offset","",""],[13,"git_commit_tree","",""],[13,"git_commit_tree_id","",""],[13,"git_commit_amend","",""],[13,"git_commit_create","",""],[13,"git_branch_create","",""],[13,"git_branch_delete","",""],[13,"git_branch_is_head","",""],[13,"git_branch_iterator_free","",""],[13,"git_branch_iterator_new","",""],[13,"git_branch_lookup","",""],[13,"git_branch_move","",""],[13,"git_branch_name","",""],[13,"git_branch_next","",""],[13,"git_branch_set_upstream","",""],[13,"git_branch_upstream","",""],[13,"git_index_add","",""],[13,"git_index_add_all","",""],[13,"git_index_add_bypath","",""],[13,"git_index_clear","",""],[13,"git_index_entry_stage","",""],[13,"git_index_entrycount","",""],[13,"git_index_find","",""],[13,"git_index_free","",""],[13,"git_index_get_byindex","",""],[13,"git_index_get_bypath","",""],[13,"git_index_new","",""],[13,"git_index_open","",""],[13,"git_index_path","",""],[13,"git_index_read","",""],[13,"git_index_read_tree","",""],[13,"git_index_remove","",""],[13,"git_index_remove_all","",""],[13,"git_index_remove_bypath","",""],[13,"git_index_remove_directory","",""],[13,"git_index_update_all","",""],[13,"git_index_write","",""],[13,"git_index_write_tree","",""],[13,"git_index_write_tree_to","",""],[13,"git_config_add_file_ondisk","",""],[13,"git_config_delete_entry","",""],[13,"git_config_delete_multivar","",""],[13,"git_config_find_global","",""],[13,"git_config_find_system","",""],[13,"git_config_find_xdg","",""],[13,"git_config_free","",""],[13,"git_config_get_bool","",""],[13,"git_config_get_entry","",""],[13,"git_config_get_int32","",""],[13,"git_config_get_int64","",""],[13,"git_config_get_string","",""],[13,"git_config_iterator_free","",""],[13,"git_config_iterator_glob_new","",""],[13,"git_config_iterator_new","",""],[13,"git_config_new","",""],[13,"git_config_next","",""],[13,"git_config_open_default","",""],[13,"git_config_open_global","",""],[13,"git_config_open_level","",""],[13,"git_config_open_ondisk","",""],[13,"git_config_parse_bool","",""],[13,"git_config_parse_int32","",""],[13,"git_config_parse_int64","",""],[13,"git_config_refresh","",""],[13,"git_config_set_bool","",""],[13,"git_config_set_int32","",""],[13,"git_config_set_int64","",""],[13,"git_config_set_string","",""],[13,"git_config_snapshot","",""],[13,"git_cred_default_new","",""],[13,"git_cred_has_username","",""],[13,"git_cred_ssh_custom_new","",""],[13,"git_cred_ssh_interactive_new","",""],[13,"git_cred_ssh_key_from_agent","",""],[13,"git_cred_ssh_key_new","",""],[13,"git_cred_userpass","",""],[13,"git_cred_userpass_plaintext_new","",""],[13,"git_push_add_refspec","",""],[13,"git_push_finish","",""],[13,"git_push_free","",""],[13,"git_push_init_options","",""],[13,"git_push_new","",""],[13,"git_push_set_options","",""],[13,"git_push_unpack_ok","",""],[13,"git_push_update_tips","",""],[13,"git_push_status_foreach","",""],[13,"git_tag_annotation_create","",""],[13,"git_tag_create","",""],[13,"git_tag_create_frombuffer","",""],[13,"git_tag_create_lightweight","",""],[13,"git_tag_delete","",""],[13,"git_tag_foreach","",""],[13,"git_tag_free","",""],[13,"git_tag_id","",""],[13,"git_tag_list","",""],[13,"git_tag_list_match","",""],[13,"git_tag_lookup","",""],[13,"git_tag_lookup_prefix","",""],[13,"git_tag_message","",""],[13,"git_tag_name","",""],[13,"git_tag_peel","",""],[13,"git_tag_tagger","",""],[13,"git_tag_target","",""],[13,"git_tag_target_id","",""],[13,"git_tag_target_type","",""],[13,"git_checkout_head","",""],[13,"git_checkout_index","",""],[13,"git_checkout_tree","",""],[13,"git_checkout_init_options","",""],[4,"git_off_t","",""],[4,"git_time_t","",""],[4,"git_checkout_notify_cb","",""],[4,"git_checkout_progress_cb","",""],[4,"git_transport_message_cb","",""],[4,"git_cred_acquire_cb","",""],[4,"git_transfer_progress_cb","",""],[4,"git_repository_create_cb","",""],[4,"git_remote_create_cb","",""],[4,"git_treewalk_cb","",""],[4,"git_index_matched_path_cb","",""],[4,"git_cred_ssh_interactive_callback","",""],[4,"git_cred_sign_callback","",""],[4,"git_tag_foreach_cb","",""],[18,"GIT_OID_RAWSZ","",""],[18,"GIT_OID_HEXSZ","",""],[18,"GIT_CLONE_OPTIONS_VERSION","",""],[18,"GIT_CHECKOUT_OPTIONS_VERSION","",""],[18,"GIT_REMOTE_CALLBACKS_VERSION","",""],[18,"GIT_REVPARSE_SINGLE","",""],[18,"GIT_REVPARSE_RANGE","",""],[18,"GIT_REVPARSE_MERGE_BASE","",""],[18,"GIT_REPOSITORY_INIT_OPTIONS_VERSION","",""],[10,"hash","","",38],[10,"cmp","","",38],[10,"partial_cmp","","",38],[10,"lt","","",38],[10,"le","","",38],[10,"gt","","",38],[10,"ge","","",38],[10,"clone","","",38],[10,"eq","","",38],[10,"ne","","",38],[10,"empty","","Returns an empty set of flags.",38],[10,"all","","Returns the set containing all flags.",38],[10,"bits","","Returns the raw value of the flags currently stored.",38],[10,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",38],[10,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",38],[10,"is_empty","","Returns `true` if no flags are currently stored.",38],[10,"is_all","","Returns `true` if all flags are currently set.",38],[10,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",38],[10,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",38],[10,"insert","","Inserts the specified flags in-place.",38],[10,"remove","","Removes the specified flags in-place.",38],[10,"toggle","","Toggles the specified flags in-place.",38],[10,"bitor","","Returns the union of the two sets of flags.",38],[10,"bitxor","","Returns the left flags, but with all the right flags toggled.",38],[10,"bitand","","Returns the intersection between the two sets of flags.",38],[10,"sub","","Returns the set difference of the two sets of flags.",38],[10,"not","","Returns the complement of this set of flags.",38],[10,"fmt","","",18],[10,"clone","","",18],[10,"eq","","",18],[10,"ne","","",18]],"paths":[[1,"git_revspec"],[1,"git_error"],[1,"git_oid"],[1,"git_strarray"],[1,"git_signature"],[1,"git_time"],[1,"git_clone_options"],[1,"git_checkout_options"],[1,"git_remote_callbacks"],[1,"git_transfer_progress"],[1,"git_diff_file"],[1,"git_buf"],[1,"git_index_entry"],[1,"git_index_time"],[1,"git_config_entry"],[1,"git_cred"],[1,"git_push_options"],[1,"git_repository_init_options"],[2,"git_error_code"],[2,"git_repository_state_t"],[2,"git_direction"],[2,"git_clone_local_t"],[2,"git_remote_completion_type"],[2,"git_checkout_notify_t"],[2,"git_checkout_strategy_t"],[2,"git_reset_t"],[2,"git_otype"],[2,"git_ref_t"],[2,"git_filemode_t"],[2,"git_treewalk_mode"],[2,"git_branch_t"],[2,"git_config_level_t"],[2,"git_submodule_update_t"],[2,"git_submodule_ignore_t"],[2,"git_credtype_t"],[2,"git_index_add_option_t"],[2,"git_repository_init_flag_t"],[2,"git_repository_init_mode_t"],[1,"git_revparse_mode_t"]]};

searchIndex['libssh2-sys'] = {"items":[[0,"","libssh2-sys",""],[1,"libssh2_agent_publickey","",""],[11,"magic","","",0],[11,"node","","",0],[11,"blob","","",0],[11,"blob_len","","",0],[11,"comment","","",0],[1,"libssh2_knownhost","",""],[11,"magic","","",1],[11,"node","","",1],[11,"name","","",1],[11,"key","","",1],[11,"typemask","","",1],[1,"LIBSSH2_SFTP_ATTRIBUTES","",""],[11,"flags","","",2],[11,"filesize","","",2],[11,"uid","","",2],[11,"gid","","",2],[11,"permissions","","",2],[11,"atime","","",2],[11,"mtime","","",2],[1,"LIBSSH2_SFTP_STATVFS","",""],[11,"f_bsize","","",3],[11,"f_frsize","","",3],[11,"f_blocks","","",3],[11,"f_bfree","","",3],[11,"f_bavail","","",3],[11,"f_files","","",3],[11,"f_ffree","","",3],[11,"f_favail","","",3],[11,"f_fsid","","",3],[11,"f_flag","","",3],[11,"f_namemax","","",3],[2,"LIBSSH2_SESSION","",""],[2,"LIBSSH2_AGENT","",""],[2,"LIBSSH2_CHANNEL","",""],[2,"LIBSSH2_LISTENER","",""],[2,"LIBSSH2_KNOWNHOSTS","",""],[2,"LIBSSH2_SFTP","",""],[2,"LIBSSH2_SFTP_HANDLE","",""],[3,"issue_14344_workaround","",""],[13,"libssh2_init","",""],[13,"libssh2_exit","",""],[13,"libssh2_free","",""],[13,"libssh2_hostkey_hash","",""],[13,"libssh2_session_init_ex","",""],[13,"libssh2_session_free","",""],[13,"libssh2_session_banner_get","",""],[13,"libssh2_session_banner_set","",""],[13,"libssh2_session_disconnect_ex","",""],[13,"libssh2_session_flag","",""],[13,"libssh2_session_get_blocking","",""],[13,"libssh2_session_get_timeout","",""],[13,"libssh2_session_hostkey","",""],[13,"libssh2_session_method_pref","",""],[13,"libssh2_session_methods","",""],[13,"libssh2_session_set_blocking","",""],[13,"libssh2_session_set_timeout","",""],[13,"libssh2_session_supported_algs","",""],[13,"libssh2_session_last_error","",""],[13,"libssh2_session_handshake","",""],[13,"libssh2_keepalive_config","",""],[13,"libssh2_keepalive_send","",""],[13,"libssh2_agent_init","",""],[13,"libssh2_agent_free","",""],[13,"libssh2_agent_connect","",""],[13,"libssh2_agent_disconnect","",""],[13,"libssh2_agent_list_identities","",""],[13,"libssh2_agent_get_identity","",""],[13,"libssh2_agent_userauth","",""],[13,"libssh2_channel_free","",""],[13,"libssh2_channel_close","",""],[13,"libssh2_channel_wait_closed","",""],[13,"libssh2_channel_wait_eof","",""],[13,"libssh2_channel_eof","",""],[13,"libssh2_channel_process_startup","",""],[13,"libssh2_channel_flush_ex","",""],[13,"libssh2_channel_write_ex","",""],[13,"libssh2_channel_get_exit_signal","",""],[13,"libssh2_channel_get_exit_status","",""],[13,"libssh2_channel_open_ex","",""],[13,"libssh2_channel_read_ex","",""],[13,"libssh2_channel_setenv_ex","",""],[13,"libssh2_channel_send_eof","",""],[13,"libssh2_channel_request_pty_ex","",""],[13,"libssh2_channel_request_pty_size_ex","",""],[13,"libssh2_channel_window_read_ex","",""],[13,"libssh2_channel_window_write_ex","",""],[13,"libssh2_channel_receive_window_adjust2","",""],[13,"libssh2_channel_direct_tcpip_ex","",""],[13,"libssh2_channel_forward_accept","",""],[13,"libssh2_channel_forward_cancel","",""],[13,"libssh2_channel_forward_listen_ex","",""],[13,"libssh2_userauth_authenticated","",""],[13,"libssh2_userauth_list","",""],[13,"libssh2_userauth_hostbased_fromfile_ex","",""],[13,"libssh2_userauth_publickey_fromfile_ex","",""],[13,"libssh2_userauth_password_ex","",""],[13,"libssh2_knownhost_free","",""],[13,"libssh2_knownhost_addc","",""],[13,"libssh2_knownhost_check","",""],[13,"libssh2_knownhost_checkp","",""],[13,"libssh2_knownhost_del","",""],[13,"libssh2_knownhost_get","",""],[13,"libssh2_knownhost_readfile","",""],[13,"libssh2_knownhost_readline","",""],[13,"libssh2_knownhost_writefile","",""],[13,"libssh2_knownhost_writeline","",""],[13,"libssh2_knownhost_init","",""],[13,"libssh2_scp_recv","",""],[13,"libssh2_scp_send64","",""],[13,"libssh2_sftp_init","",""],[13,"libssh2_sftp_shutdown","",""],[13,"libssh2_sftp_last_error","",""],[13,"libssh2_sftp_open_ex","",""],[13,"libssh2_sftp_close_handle","",""],[13,"libssh2_sftp_mkdir_ex","",""],[13,"libssh2_sftp_fsync","",""],[13,"libssh2_sftp_fstat_ex","",""],[13,"libssh2_sftp_fstatvfs","",""],[13,"libssh2_sftp_stat_ex","",""],[13,"libssh2_sftp_read","",""],[13,"libssh2_sftp_symlink_ex","",""],[13,"libssh2_sftp_rename_ex","",""],[13,"libssh2_sftp_rmdir_ex","",""],[13,"libssh2_sftp_write","",""],[13,"libssh2_sftp_tell64","",""],[13,"libssh2_sftp_seek64","",""],[13,"libssh2_sftp_readdir_ex","",""],[4,"LIBSSH2_ALLOC_FUNC","",""],[4,"LIBSSH2_FREE_FUNC","",""],[4,"LIBSSH2_REALLOC_FUNC","",""],[4,"LIBSSH2_PASSWD_CHANGEREQ_FUNC","",""],[4,"libssh2_socket_t","",""],[18,"SSH_DISCONNECT_HOST_NOT_ALLOWED_TO_CONNECT","",""],[18,"SSH_DISCONNECT_PROTOCOL_ERROR","",""],[18,"SSH_DISCONNECT_KEY_EXCHANGE_FAILED","",""],[18,"SSH_DISCONNECT_RESERVED","",""],[18,"SSH_DISCONNECT_MAC_ERROR","",""],[18,"SSH_DISCONNECT_COMPRESSION_ERROR","",""],[18,"SSH_DISCONNECT_SERVICE_NOT_AVAILABLE","",""],[18,"SSH_DISCONNECT_PROTOCOL_VERSION_NOT_SUPPORTED","",""],[18,"SSH_DISCONNECT_HOST_KEY_NOT_VERIFIABLE","",""],[18,"SSH_DISCONNECT_CONNECTION_LOST","",""],[18,"SSH_DISCONNECT_BY_APPLICATION","",""],[18,"SSH_DISCONNECT_TOO_MANY_CONNECTIONS","",""],[18,"SSH_DISCONNECT_AUTH_CANCELLED_BY_USER","",""],[18,"SSH_DISCONNECT_NO_MORE_AUTH_METHODS_AVAILABLE","",""],[18,"SSH_DISCONNECT_ILLEGAL_USER_NAME","",""],[18,"LIBSSH2_FLAG_SIGPIPE","",""],[18,"LIBSSH2_FLAG_COMPRESS","",""],[18,"LIBSSH2_HOSTKEY_TYPE_UNKNOWN","",""],[18,"LIBSSH2_HOSTKEY_TYPE_RSA","",""],[18,"LIBSSH2_HOSTKEY_TYPE_DSS","",""],[18,"LIBSSH2_METHOD_KEX","",""],[18,"LIBSSH2_METHOD_HOSTKEY","",""],[18,"LIBSSH2_METHOD_CRYPT_CS","",""],[18,"LIBSSH2_METHOD_CRYPT_SC","",""],[18,"LIBSSH2_METHOD_MAC_CS","",""],[18,"LIBSSH2_METHOD_MAC_SC","",""],[18,"LIBSSH2_METHOD_COMP_CS","",""],[18,"LIBSSH2_METHOD_COMP_SC","",""],[18,"LIBSSH2_METHOD_LANG_CS","",""],[18,"LIBSSH2_METHOD_LANG_SC","",""],[18,"LIBSSH2_CHANNEL_PACKET_DEFAULT","",""],[18,"LIBSSH2_CHANNEL_WINDOW_DEFAULT","",""],[18,"LIBSSH2_ERROR_BANNER_RECV","",""],[18,"LIBSSH2_ERROR_BANNER_SEND","",""],[18,"LIBSSH2_ERROR_INVALID_MAC","",""],[18,"LIBSSH2_ERROR_KEX_FAILURE","",""],[18,"LIBSSH2_ERROR_ALLOC","",""],[18,"LIBSSH2_ERROR_SOCKET_SEND","",""],[18,"LIBSSH2_ERROR_KEY_EXCHANGE_FAILURE","",""],[18,"LIBSSH2_ERROR_TIMEOUT","",""],[18,"LIBSSH2_ERROR_HOSTKEY_INIT","",""],[18,"LIBSSH2_ERROR_HOSTKEY_SIGN","",""],[18,"LIBSSH2_ERROR_DECRYPT","",""],[18,"LIBSSH2_ERROR_SOCKET_DISCONNECT","",""],[18,"LIBSSH2_ERROR_PROTO","",""],[18,"LIBSSH2_ERROR_PASSWORD_EXPIRED","",""],[18,"LIBSSH2_ERROR_FILE","",""],[18,"LIBSSH2_ERROR_METHOD_NONE","",""],[18,"LIBSSH2_ERROR_AUTHENTICATION_FAILED","",""],[18,"LIBSSH2_ERROR_PUBLICKEY_UNRECOGNIZED","",""],[18,"LIBSSH2_ERROR_PUBLICKEY_UNVERIFIED","",""],[18,"LIBSSH2_ERROR_CHANNEL_OUTOFORDER","",""],[18,"LIBSSH2_ERROR_CHANNEL_FAILURE","",""],[18,"LIBSSH2_ERROR_CHANNEL_REQUEST_DENIED","",""],[18,"LIBSSH2_ERROR_CHANNEL_UNKNOWN","",""],[18,"LIBSSH2_ERROR_CHANNEL_WINDOW_EXCEEDED","",""],[18,"LIBSSH2_ERROR_CHANNEL_PACKET_EXCEEDED","",""],[18,"LIBSSH2_ERROR_CHANNEL_CLOSED","",""],[18,"LIBSSH2_ERROR_CHANNEL_EOF_SENT","",""],[18,"LIBSSH2_ERROR_SCP_PROTOCOL","",""],[18,"LIBSSH2_ERROR_ZLIB","",""],[18,"LIBSSH2_ERROR_SOCKET_TIMEOUT","",""],[18,"LIBSSH2_ERROR_SFTP_PROTOCOL","",""],[18,"LIBSSH2_ERROR_REQUEST_DENIED","",""],[18,"LIBSSH2_ERROR_METHOD_NOT_SUPPORTED","",""],[18,"LIBSSH2_ERROR_INVAL","",""],[18,"LIBSSH2_ERROR_INVALID_POLL_TYPE","",""],[18,"LIBSSH2_ERROR_PUBLICKEY_PROTOCOL","",""],[18,"LIBSSH2_ERROR_EAGAIN","",""],[18,"LIBSSH2_ERROR_BUFFER_TOO_SMALL","",""],[18,"LIBSSH2_ERROR_BAD_USE","",""],[18,"LIBSSH2_ERROR_COMPRESS","",""],[18,"LIBSSH2_ERROR_OUT_OF_BOUNDARY","",""],[18,"LIBSSH2_ERROR_AGENT_PROTOCOL","",""],[18,"LIBSSH2_ERROR_SOCKET_RECV","",""],[18,"LIBSSH2_ERROR_ENCRYPT","",""],[18,"LIBSSH2_ERROR_BAD_SOCKET","",""],[18,"LIBSSH2_ERROR_KNOWN_HOSTS","",""],[18,"LIBSSH2_HOSTKEY_HASH_MD5","",""],[18,"LIBSSH2_HOSTKEY_HASH_SHA1","",""],[18,"LIBSSH2_KNOWNHOST_FILE_OPENSSH","",""],[18,"LIBSSH2_KNOWNHOST_CHECK_MATCH","",""],[18,"LIBSSH2_KNOWNHOST_CHECK_MISMATCH","",""],[18,"LIBSSH2_KNOWNHOST_CHECK_NOTFOUND","",""],[18,"LIBSSH2_KNOWNHOST_CHECK_FAILURE","",""],[18,"LIBSSH2_KNOWNHOST_TYPE_PLAIN","",""],[18,"LIBSSH2_KNOWNHOST_TYPE_SHA1","",""],[18,"LIBSSH2_KNOWNHOST_TYPE_CUSTOM","",""],[18,"LIBSSH2_KNOWNHOST_KEYENC_RAW","",""],[18,"LIBSSH2_KNOWNHOST_KEYENC_BASE64","",""],[18,"LIBSSH2_KNOWNHOST_KEY_RSA1","",""],[18,"LIBSSH2_KNOWNHOST_KEY_SSHRSA","",""],[18,"LIBSSH2_KNOWNHOST_KEY_SSHDSS","",""],[18,"LIBSSH2_KNOWNHOST_KEY_UNKNOWN","",""],[18,"LIBSSH2_FXF_READ","",""],[18,"LIBSSH2_FXF_WRITE","",""],[18,"LIBSSH2_FXF_APPEND","",""],[18,"LIBSSH2_FXF_CREAT","",""],[18,"LIBSSH2_FXF_TRUNC","",""],[18,"LIBSSH2_FXF_EXCL","",""],[18,"LIBSSH2_SFTP_OPENFILE","",""],[18,"LIBSSH2_SFTP_OPENDIR","",""],[18,"LIBSSH2_SFTP_ATTR_SIZE","",""],[18,"LIBSSH2_SFTP_ATTR_UIDGID","",""],[18,"LIBSSH2_SFTP_ATTR_PERMISSIONS","",""],[18,"LIBSSH2_SFTP_ATTR_ACMODTIME","",""],[18,"LIBSSH2_SFTP_ATTR_EXTENDED","",""],[18,"LIBSSH2_SFTP_STAT","",""],[18,"LIBSSH2_SFTP_LSTAT","",""],[18,"LIBSSH2_SFTP_SETSTAT","",""],[18,"LIBSSH2_SFTP_SYMLINK","",""],[18,"LIBSSH2_SFTP_READLINK","",""],[18,"LIBSSH2_SFTP_REALPATH","",""],[18,"LIBSSH2_SFTP_RENAME_OVERWRITE","",""],[18,"LIBSSH2_SFTP_RENAME_ATOMIC","",""],[18,"LIBSSH2_SFTP_RENAME_NATIVE","",""]],"paths":[[1,"libssh2_agent_publickey"],[1,"libssh2_knownhost"],[1,"LIBSSH2_SFTP_ATTRIBUTES"],[1,"LIBSSH2_SFTP_STATVFS"]]};

searchIndex['time'] = {"items":[[0,"","time","Simple time handling."],[1,"Timespec","","A record specifying a time value in seconds and nanoseconds."],[11,"sec","","",0],[11,"nsec","","",0],[1,"Tm","","Holds a calendar date and time broken down into its components (year, month, day, and so on),\nalso called a broken-down time value."],[11,"tm_sec","","Seconds after the minute - [0, 60]",1],[11,"tm_min","","Minutes after the hour - [0, 59]",1],[11,"tm_hour","","Hours after midnight - [0, 23]",1],[11,"tm_mday","","Day of the month - [1, 31]",1],[11,"tm_mon","","Months since January - [0, 11]",1],[11,"tm_year","","Years since 1900",1],[11,"tm_wday","","Days since Sunday - [0, 6]. 0 = Sunday, 1 = Monday, ..., 6 = Saturday.",1],[11,"tm_yday","","Days since January 1 - [0, 365]",1],[11,"tm_isdst","","Daylight Saving Time flag.",1],[11,"tm_utcoff","","Identifies the time zone that was used to compute this broken-down time value, including any\nadjustment for Daylight Saving Time. This is the number of seconds east of UTC. For example,\nfor U.S. Pacific Daylight Time, the value is -7*60*60 = -25200.",1],[11,"tm_nsec","","Nanoseconds after the second - [0, 10<sup>9</sup> - 1]",1],[1,"TmFmt","","A wrapper around a `Tm` and format string that implements Show."],[2,"ParseError","",""],[12,"InvalidSecond","","",2],[12,"InvalidMinute","","",2],[12,"InvalidHour","","",2],[12,"InvalidDay","","",2],[12,"InvalidMonth","","",2],[12,"InvalidYear","","",2],[12,"InvalidDayOfWeek","","",2],[12,"InvalidDayOfMonth","","",2],[12,"InvalidDayOfYear","","",2],[12,"InvalidZoneOffset","","",2],[12,"InvalidTime","","",2],[12,"MissingFormatConverter","","",2],[12,"InvalidFormatSpecifier","","",2],[12,"UnexpectedCharacter","","",2],[3,"get_time","","Returns the current time as a `timespec` containing the seconds and\nnanoseconds since 1970-01-01T00:00:00Z."],[3,"precise_time_ns","","Returns the current value of a high-resolution performance counter\nin nanoseconds since an unspecified epoch."],[3,"precise_time_s","","Returns the current value of a high-resolution performance counter\nin seconds since an unspecified epoch."],[3,"tzset","",""],[3,"empty_tm","",""],[3,"at_utc","","Returns the specified time in UTC"],[3,"now_utc","","Returns the current time in UTC"],[3,"at","","Returns the specified time in the local timezone"],[3,"now","","Returns the current time in the local timezone"],[3,"strptime","","Parses the time from the string according to the format string."],[3,"strftime","","Formats the time according to the format string."],[10,"fmt","","",0],[10,"decode","","",0],[10,"encode","","",0],[10,"cmp","","",0],[10,"partial_cmp","","",0],[10,"lt","","",0],[10,"le","","",0],[10,"gt","","",0],[10,"ge","","",0],[10,"eq","","",0],[10,"ne","","",0],[10,"clone","","",0],[10,"new","","",0],[10,"add","","",0],[10,"sub","","",0],[10,"fmt","","",1],[10,"eq","","",1],[10,"ne","","",1],[10,"clone","","",1],[10,"to_timespec","","Convert time to the seconds from January 1, 1970",1],[10,"to_local","","Convert time to the local timezone",1],[10,"to_utc","","Convert time to the UTC",1],[10,"ctime","","Returns a TmFmt that outputs according to the `asctime` format in ISO\nC, in the local timezone.",1],[10,"asctime","","Returns a TmFmt that outputs according to the `asctime` format in ISO\nC.",1],[10,"strftime","","Formats the time according to the format string.",1],[10,"rfc822","","Returns a TmFmt that outputs according to RFC 822.",1],[10,"rfc822z","","Returns a TmFmt that outputs according to RFC 822 with Zulu time.",1],[10,"rfc3339","","Returns a TmFmt that outputs according to RFC 3339. RFC 3339 is\ncompatible with ISO 8601.",1],[10,"eq","","",2],[10,"ne","","",2],[10,"fmt","","",2],[10,"fmt","","",3]],"paths":[[1,"Timespec"],[1,"Tm"],[2,"ParseError"],[1,"TmFmt"]]};

searchIndex['openssl-sys'] = {"items":[[0,"","openssl-sys",""],[1,"EVP_MD_CTX","",""],[1,"HMAC_CTX","",""],[1,"X509V3_CTX","",""],[1,"BIGNUM","",""],[11,"d","","",0],[11,"top","","",0],[11,"dmax","","",0],[11,"neg","","",0],[11,"flags","","",0],[3,"init","",""],[3,"BIO_eof","",""],[13,"ASN1_INTEGER_set","",""],[13,"ASN1_STRING_type_new","",""],[13,"ASN1_TIME_free","",""],[13,"BIO_ctrl","",""],[13,"BIO_free_all","",""],[13,"BIO_new","",""],[13,"BIO_read","",""],[13,"BIO_write","",""],[13,"BIO_s_mem","",""],[13,"BN_new","",""],[13,"BN_dup","",""],[13,"BN_clear_free","",""],[13,"BN_CTX_new","",""],[13,"BN_CTX_free","",""],[13,"BN_num_bits","",""],[13,"BN_set_negative","",""],[13,"BN_set_word","",""],[13,"BN_add","",""],[13,"BN_div","",""],[13,"BN_exp","",""],[13,"BN_gcd","",""],[13,"BN_mod_add","",""],[13,"BN_mod_exp","",""],[13,"BN_mod_inverse","",""],[13,"BN_mod_mul","",""],[13,"BN_mod_sqr","",""],[13,"BN_mod_sub","",""],[13,"BN_mul","",""],[13,"BN_nnmod","",""],[13,"BN_sqr","",""],[13,"BN_sub","",""],[13,"BN_clear_bit","",""],[13,"BN_is_bit_set","",""],[13,"BN_lshift","",""],[13,"BN_lshift1","",""],[13,"BN_mask_bits","",""],[13,"BN_rshift","",""],[13,"BN_set_bit","",""],[13,"BN_rshift1","",""],[13,"BN_cmp","",""],[13,"BN_ucmp","",""],[13,"BN_generate_prime_ex","",""],[13,"BN_is_prime_ex","",""],[13,"BN_is_prime_fasttest_ex","",""],[13,"BN_rand","",""],[13,"BN_pseudo_rand","",""],[13,"BN_rand_range","",""],[13,"BN_pseudo_rand_range","",""],[13,"BN_bin2bn","",""],[13,"BN_bn2bin","",""],[13,"BN_bn2dec","",""],[13,"CRYPTO_num_locks","",""],[13,"CRYPTO_set_locking_callback","",""],[13,"CRYPTO_free","",""],[13,"CRYPTO_memcmp","",""],[13,"ERR_get_error","",""],[13,"ERR_lib_error_string","",""],[13,"ERR_func_error_string","",""],[13,"ERR_reason_error_string","",""],[13,"ERR_load_crypto_strings","",""],[13,"EVP_md5","",""],[13,"EVP_ripemd160","",""],[13,"EVP_sha1","",""],[13,"EVP_sha224","",""],[13,"EVP_sha256","",""],[13,"EVP_sha384","",""],[13,"EVP_sha512","",""],[13,"EVP_aes_128_cbc","",""],[13,"EVP_aes_128_ecb","",""],[13,"EVP_aes_256_cbc","",""],[13,"EVP_aes_256_ecb","",""],[13,"EVP_rc4","",""],[13,"EVP_CIPHER_CTX_new","",""],[13,"EVP_CIPHER_CTX_set_padding","",""],[13,"EVP_CIPHER_CTX_free","",""],[13,"EVP_CipherInit","",""],[13,"EVP_CipherUpdate","",""],[13,"EVP_CipherFinal","",""],[13,"EVP_DigestInit","",""],[13,"EVP_DigestUpdate","",""],[13,"EVP_DigestFinal","",""],[13,"EVP_MD_CTX_create","",""],[13,"EVP_MD_CTX_destroy","",""],[13,"EVP_PKEY_new","",""],[13,"EVP_PKEY_free","",""],[13,"EVP_PKEY_assign","",""],[13,"EVP_PKEY_get1_RSA","",""],[13,"EVP_PKEY_set1_RSA","",""],[13,"HMAC_CTX_init","",""],[13,"HMAC_Init_ex","",""],[13,"HMAC_Final","",""],[13,"HMAC_Update","",""],[13,"PEM_read_bio_X509","",""],[13,"PEM_write_bio_PrivateKey","",""],[13,"PEM_write_bio_X509","",""],[13,"PKCS5_PBKDF2_HMAC_SHA1","",""],[13,"RAND_bytes","",""],[13,"RSA_generate_key","",""],[13,"RSA_private_decrypt","",""],[13,"RSA_public_encrypt","",""],[13,"RSA_sign","",""],[13,"RSA_size","",""],[13,"RSA_verify","",""],[13,"SSL_library_init","",""],[13,"SSL_load_error_strings","",""],[13,"SSLv3_method","",""],[13,"TLSv1_method","",""],[13,"SSLv23_method","",""],[13,"SSL_new","",""],[13,"SSL_free","",""],[13,"SSL_set_bio","",""],[13,"SSL_get_rbio","",""],[13,"SSL_get_wbio","",""],[13,"SSL_accept","",""],[13,"SSL_connect","",""],[13,"SSL_ctrl","",""],[13,"SSL_get_error","",""],[13,"SSL_read","",""],[13,"SSL_write","",""],[13,"SSL_get_ex_data_X509_STORE_CTX_idx","",""],[13,"SSL_get_SSL_CTX","",""],[13,"SSL_get_current_compression","",""],[13,"SSL_COMP_get_name","",""],[13,"SSL_CTX_new","",""],[13,"SSL_CTX_free","",""],[13,"SSL_CTX_set_verify","",""],[13,"SSL_CTX_set_verify_depth","",""],[13,"SSL_CTX_load_verify_locations","",""],[13,"SSL_CTX_get_ex_new_index","",""],[13,"SSL_CTX_set_ex_data","",""],[13,"SSL_CTX_get_ex_data","",""],[13,"SSL_CTX_use_certificate_file","",""],[13,"SSL_CTX_use_PrivateKey_file","",""],[13,"SSL_CTX_set_cipher_list","",""],[13,"X509_add_ext","",""],[13,"X509_digest","",""],[13,"X509_free","",""],[13,"X509_get_serialNumber","",""],[13,"X509_get_subject_name","",""],[13,"X509_gmtime_adj","",""],[13,"X509_new","",""],[13,"X509_set_issuer_name","",""],[13,"X509_set_notAfter","",""],[13,"X509_set_notBefore","",""],[13,"X509_set_version","",""],[13,"X509_set_pubkey","",""],[13,"X509_sign","",""],[13,"X509_EXTENSION_free","",""],[13,"X509_NAME_add_entry_by_txt","",""],[13,"X509_STORE_CTX_get_current_cert","",""],[13,"X509_STORE_CTX_get_error","",""],[13,"X509_STORE_CTX_get_ex_data","",""],[13,"X509V3_EXT_conf_nid","",""],[13,"X509V3_set_ctx","",""],[13,"i2d_RSA_PUBKEY","",""],[13,"d2i_RSA_PUBKEY","",""],[13,"i2d_RSAPrivateKey","",""],[13,"d2i_RSAPrivateKey","",""],[0,"probe","",""],[1,"ProbeResult","openssl-sys::probe",""],[11,"cert_file","","",1],[11,"cert_dir","","",1],[3,"find_certs_dirs","","Probe the system for the directory in which CA certificates should likely be\nfound."],[3,"init_ssl_cert_env_vars","",""],[3,"probe","",""],[4,"ASN1_INTEGER","openssl-sys",""],[4,"ASN1_STRING","",""],[4,"ASN1_TIME","",""],[4,"BIO","",""],[4,"BIO_METHOD","",""],[4,"BN_CTX","",""],[4,"COMP_METHOD","",""],[4,"CRYPTO_EX_DATA","",""],[4,"ENGINE","",""],[4,"EVP_CIPHER","",""],[4,"EVP_CIPHER_CTX","",""],[4,"EVP_MD","",""],[4,"EVP_PKEY","",""],[4,"EVP_PKEY_CTX","",""],[4,"RSA","",""],[4,"SSL","",""],[4,"SSL_CTX","",""],[4,"SSL_METHOD","",""],[4,"X509","",""],[4,"X509_CRL","",""],[4,"X509_EXTENSION","",""],[4,"X509_NAME","",""],[4,"X509_REQ","",""],[4,"X509_STORE_CTX","",""],[4,"CRYPTO_EX_new","",""],[4,"CRYPTO_EX_dup","",""],[4,"CRYPTO_EX_free","",""],[4,"PasswordCallback","",""],[18,"BIO_CTRL_EOF","",""],[18,"CRYPTO_LOCK","",""],[18,"MBSTRING_ASC","",""],[18,"MBSTRING_BMP","",""],[18,"MBSTRING_FLAG","",""],[18,"MBSTRING_UNIV","",""],[18,"MBSTRING_UTF8","",""],[18,"NID_ext_key_usage","",""],[18,"NID_key_usage","",""],[18,"SSL_CTRL_SET_TLSEXT_HOSTNAME","",""],[18,"SSL_ERROR_NONE","",""],[18,"SSL_ERROR_SSL","",""],[18,"SSL_ERROR_SYSCALL","",""],[18,"SSL_ERROR_WANT_ACCEPT","",""],[18,"SSL_ERROR_WANT_CONNECT","",""],[18,"SSL_ERROR_WANT_READ","",""],[18,"SSL_ERROR_WANT_WRITE","",""],[18,"SSL_ERROR_WANT_X509_LOOKUP","",""],[18,"SSL_ERROR_ZERO_RETURN","",""],[18,"SSL_VERIFY_NONE","",""],[18,"SSL_VERIFY_PEER","",""],[18,"TLSEXT_NAMETYPE_host_name","",""],[18,"V_ASN1_GENERALIZEDTIME","",""],[18,"V_ASN1_UTCTIME","",""],[18,"X509_FILETYPE_ASN1","",""],[18,"X509_FILETYPE_DEFAULT","",""],[18,"X509_FILETYPE_PEM","",""],[18,"X509_V_ERR_AKID_ISSUER_SERIAL_MISMATCH","",""],[18,"X509_V_ERR_AKID_SKID_MISMATCH","",""],[18,"X509_V_ERR_APPLICATION_VERIFICATION","",""],[18,"X509_V_ERR_CERT_CHAIN_TOO_LONG","",""],[18,"X509_V_ERR_CERT_HAS_EXPIRED","",""],[18,"X509_V_ERR_CERT_NOT_YET_VALID","",""],[18,"X509_V_ERR_CERT_REJECTED","",""],[18,"X509_V_ERR_CERT_REVOKED","",""],[18,"X509_V_ERR_CERT_SIGNATURE_FAILURE","",""],[18,"X509_V_ERR_CERT_UNTRUSTED","",""],[18,"X509_V_ERR_CRL_HAS_EXPIRED","",""],[18,"X509_V_ERR_CRL_NOT_YET_VALID","",""],[18,"X509_V_ERR_CRL_PATH_VALIDATION_ERROR","",""],[18,"X509_V_ERR_CRL_SIGNATURE_FAILURE","",""],[18,"X509_V_ERR_DEPTH_ZERO_SELF_SIGNED_CERT","",""],[18,"X509_V_ERR_DIFFERENT_CRL_SCOPE","",""],[18,"X509_V_ERR_ERROR_IN_CERT_NOT_AFTER_FIELD","",""],[18,"X509_V_ERR_ERROR_IN_CERT_NOT_BEFORE_FIELD","",""],[18,"X509_V_ERR_ERROR_IN_CRL_LAST_UPDATE_FIELD","",""],[18,"X509_V_ERR_ERROR_IN_CRL_NEXT_UPDATE_FIELD","",""],[18,"X509_V_ERR_EXCLUDED_VIOLATION","",""],[18,"X509_V_ERR_INVALID_CA","",""],[18,"X509_V_ERR_INVALID_EXTENSION","",""],[18,"X509_V_ERR_INVALID_NON_CA","",""],[18,"X509_V_ERR_INVALID_POLICY_EXTENSION","",""],[18,"X509_V_ERR_INVALID_PURPOSE","",""],[18,"X509_V_ERR_KEYUSAGE_NO_CERTSIGN","",""],[18,"X509_V_ERR_KEYUSAGE_NO_CRL_SIGN","",""],[18,"X509_V_ERR_KEYUSAGE_NO_DIGITAL_SIGNATURE","",""],[18,"X509_V_ERR_NO_EXPLICIT_POLICY","",""],[18,"X509_V_ERR_OUT_OF_MEM","",""],[18,"X509_V_ERR_PATH_LENGTH_EXCEEDED","",""],[18,"X509_V_ERR_PERMITTED_VIOLATION","",""],[18,"X509_V_ERR_PROXY_CERTIFICATES_NOT_ALLOWED","",""],[18,"X509_V_ERR_PROXY_PATH_LENGTH_EXCEEDED","",""],[18,"X509_V_ERR_SELF_SIGNED_CERT_IN_CHAIN","",""],[18,"X509_V_ERR_SUBJECT_ISSUER_MISMATCH","",""],[18,"X509_V_ERR_SUBTREE_MINMAX","",""],[18,"X509_V_ERR_UNABLE_TO_DECODE_ISSUER_PUBLIC_KEY","",""],[18,"X509_V_ERR_UNABLE_TO_DECRYPT_CERT_SIGNATURE","",""],[18,"X509_V_ERR_UNABLE_TO_DECRYPT_CRL_SIGNATURE","",""],[18,"X509_V_ERR_UNABLE_TO_GET_CRL","",""],[18,"X509_V_ERR_UNABLE_TO_GET_CRL_ISSUER","",""],[18,"X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT","",""],[18,"X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT_LOCALLY","",""],[18,"X509_V_ERR_UNABLE_TO_VERIFY_LEAF_SIGNATURE","",""],[18,"X509_V_ERR_UNHANDLED_CRITICAL_CRL_EXTENSION","",""],[18,"X509_V_ERR_UNHANDLED_CRITICAL_EXTENSION","",""],[18,"X509_V_ERR_UNNESTED_RESOURCE","",""],[18,"X509_V_ERR_UNSUPPORTED_CONSTRAINT_SYNTAX","",""],[18,"X509_V_ERR_UNSUPPORTED_CONSTRAINT_TYPE","",""],[18,"X509_V_ERR_UNSUPPORTED_EXTENSION_FEATURE","",""],[18,"X509_V_ERR_UNSUPPORTED_NAME_SYNTAX","",""],[18,"X509_V_OK","",""]],"paths":[[1,"BIGNUM"],[1,"ProbeResult"]]};

searchIndex['url'] = {"items":[[0,"","url","<a href=\"https://github.com/servo/rust-url\"><img style=\"position: absolute; top: 0; left: 0; border: 0;\" src=\"../github.png\" alt=\"Fork me on GitHub\"></a>\n<style>.sidebar { margin-top: 53px }</style>"],[1,"Ipv6Address","","A 128 bit IPv6 address"],[11,"pieces","","",0],[1,"Url","","The parsed representation of an absolute URL."],[11,"scheme","","The scheme (a.k.a. protocol) of the URL, in ASCII lower case.",1],[11,"scheme_data","","The components of the URL whose representation depends on where the scheme is *relative*.",1],[11,"query","","The query string of the URL.",1],[11,"fragment","","The fragment identifier of the URL.",1],[1,"RelativeSchemeData","","Components for URLs in a *relative* scheme such as HTTP."],[11,"username","","The username of the URL, as a possibly empty, pecent-encoded string.",2],[11,"password","","The password of the URL.",2],[11,"host","","The host of the URL, either a domain name or an IPv4 address",2],[11,"port","","The port number of the URL.\n`None` for file-like schemes, or to indicate the default port number.",2],[11,"default_port","","The default port number for the URL’s scheme.\n`None` for file-like schemes.",2],[11,"path","","The path of the URL, as vector of pecent-encoded strings.",2],[1,"UrlParser","","A set of optional parameters for URL parsing."],[2,"Host","","The host name of an URL."],[12,"Domain","","A (DNS) domain name or an IPv4 address.",3],[12,"Ipv6","","An IPv6 address, represented inside `[...]` square brackets\nso that `:` colon characters in the address are not ambiguous\nwith the port number delimiter.",3],[2,"ParseError","","Errors that can occur during parsing."],[12,"EmptyHost","","",4],[12,"InvalidScheme","","",4],[12,"InvalidPort","","",4],[12,"InvalidIpv6Address","","",4],[12,"InvalidDomainCharacter","","",4],[12,"InvalidCharacter","","",4],[12,"InvalidBackslash","","",4],[12,"InvalidPercentEncoded","","",4],[12,"InvalidAtSymbolInUser","","",4],[12,"ExpectedTwoSlashes","","",4],[12,"ExpectedInitialSlash","","",4],[12,"NonUrlCodePoint","","",4],[12,"RelativeUrlWithScheme","","",4],[12,"RelativeUrlWithoutBase","","",4],[12,"RelativeUrlWithNonRelativeBase","","",4],[12,"NonAsciiDomainsNotSupportedYet","","",4],[12,"CannotSetJavascriptFragment","","",4],[12,"CannotSetPortWithFileLikeScheme","","",4],[12,"CannotSetUsernameWithNonRelativeScheme","","",4],[12,"CannotSetPasswordWithNonRelativeScheme","","",4],[12,"CannotSetHostPortWithNonRelativeScheme","","",4],[12,"CannotSetHostWithNonRelativeScheme","","",4],[12,"CannotSetPortWithNonRelativeScheme","","",4],[12,"CannotSetPathWithNonRelativeScheme","","",4],[2,"SchemeData","","The components of the URL whose representation depends on where the scheme is *relative*."],[12,"Relative","","Components for URLs in a *relative* scheme such as HTTP.",5],[12,"NonRelative","","No further structure is assumed for *non-relative* schemes such as `data` and `mailto`.",5],[2,"SchemeType","","Determines the behavior of the URL parser for a given scheme."],[12,"NonRelative","","Indicate that the scheme is *non-relative*.",6],[12,"Relative","","Indicate that the scheme is *relative*, and what the default port number is.",6],[12,"FileLike","","Indicate a *relative* scheme similar to the *file* scheme.",6],[3,"parse_path","","Parse `input` as a “standalone” URL path,\nwith an optional query string and fragment identifier."],[3,"whatwg_scheme_type_mapper","","http://url.spec.whatwg.org/#relative-scheme"],[10,"clone","","",3],[10,"eq","","",3],[10,"ne","","",3],[10,"clone","","",0],[10,"eq","","",0],[10,"parse","","Parse a host: either an IPv6 address in [] square brackets, or a domain.",3],[10,"serialize","","Serialize the host as a string.",3],[10,"fmt","","",3],[10,"parse","","Parse an IPv6 address, without the [] square brackets.",0],[10,"serialize","","Serialize the IPv6 address to a string.",0],[10,"fmt","","",0],[10,"clone","","",4],[10,"eq","","",4],[10,"ne","","",4],[10,"description","","",4],[10,"fmt","","",4],[0,"percent_encoding","",""],[1,"EncodeSet","url::percent_encoding","Represents a set of characters / bytes that should be percent-encoded."],[3,"percent_encode_to","","Percent-encode the given bytes, and push the result to `output`."],[3,"percent_encode","","Percent-encode the given bytes."],[3,"utf8_percent_encode_to","","Percent-encode the UTF-8 encoding of the given string, and push the result to `output`."],[3,"utf8_percent_encode","","Percent-encode the UTF-8 encoding of the given string."],[3,"percent_decode_to","","Percent-decode the given bytes, and push the result to `output`."],[3,"percent_decode","","Percent-decode the given bytes."],[3,"lossy_utf8_percent_decode","","Percent-decode the given bytes, and decode the result as UTF-8."],[3,"from_hex","",""],[5,"SIMPLE_ENCODE_SET","","This encode set is used for fragment identifier and non-relative scheme data."],[5,"QUERY_ENCODE_SET","","This encode set is used in the URL parser for query strings."],[5,"DEFAULT_ENCODE_SET","","This encode set is used for path components."],[5,"USERINFO_ENCODE_SET","","This encode set is used in the URL parser for usernames and passwords."],[5,"PASSWORD_ENCODE_SET","","This encode set should be used when setting the password field of a parsed URL."],[5,"USERNAME_ENCODE_SET","","This encode set should be used when setting the username field of a parsed URL."],[5,"FORM_URLENCODED_ENCODE_SET","","This encode set is used in `application/x-www-form-urlencoded` serialization."],[0,"form_urlencoded","url","Parser and serializer for the [`application/x-www-form-urlencoded` format](\nhttp://url.spec.whatwg.org/#application/x-www-form-urlencoded),\nas used by HTML forms."],[3,"parse","url::form_urlencoded","Convert a byte string in the `application/x-www-form-urlencoded` format\ninto a vector of (name, value) pairs."],[3,"serialize_owned","","Convert a slice of owned (name, value) pairs\ninto a string in the `application/x-www-form-urlencoded` format."],[3,"serialize","","Convert an iterator of (name, value) pairs\ninto a string in the `application/x-www-form-urlencoded` format."],[0,"punycode","url","Punycode ([RFC 3492](http://tools.ietf.org/html/rfc3492)) implementation."],[3,"decode_to_string","url::punycode","Convert Punycode to an Unicode `String`."],[3,"decode","","Convert Punycode to Unicode."],[3,"encode_str","","Convert an Unicode `str` to Punycode."],[3,"encode","","Convert Unicode to Punycode."],[0,"format","url","Formatting utilities for URLs."],[1,"PathFormatter","url::format","Formatter and serializer for URL path data."],[11,"path","","The path as a slice of string-like objects (String or &str).",7],[1,"UserInfoFormatter","","Formatter and serializer for URL username and password data."],[11,"username","","URL username as a string slice.",8],[11,"password","","URL password as an optional string slice.",8],[1,"UrlNoFragmentFormatter","","Formatter for URLs which ignores the fragment field."],[11,"url","","",9],[10,"fmt","","",7],[10,"fmt","","",8],[10,"fmt","","",9],[4,"ErrorHandler","url","This is called on non-fatal parse errors."],[4,"ParseResult","",""],[6,"ToUrlPath","",""],[9,"to_url_path","","",10],[6,"FromUrlPath","",""],[9,"from_url_path","","",11],[10,"clone","","",1],[10,"eq","","",1],[10,"ne","","",1],[10,"clone","","",5],[10,"eq","","",5],[10,"ne","","",5],[10,"clone","","",2],[10,"eq","","",2],[10,"ne","","",2],[10,"hash","","",1],[10,"new","","Return a new UrlParser with default parameters.",12],[10,"base_url","","Set the base URL used for resolving relative URL references, and return the `UrlParser`.\nThe default is no base URL, so that relative URLs references fail to parse.",12],[10,"error_handler","","Set an error handler for non-fatal parse errors, and return the `UrlParser`.",12],[10,"scheme_type_mapper","","Set a *scheme type mapper*, and return the `UrlParser`.",12],[10,"parse","","Parse `input` as an URL, with all the parameters previously set in the `UrlParser`.",12],[10,"parse_path","","Parse `input` as a “standalone” URL path,\nwith an optional query string and fragment identifier.",12],[10,"eq","","",6],[10,"ne","","",6],[10,"default_port","","",6],[10,"parse","","Parse an URL with the default `UrlParser` parameters.",1],[10,"from_file_path","","Convert a file name as `std::path::Path` into an URL in the `file` scheme.",1],[10,"from_directory_path","","Convert a directory name as `std::path::Path` into an URL in the `file` scheme.",1],[10,"to_file_path","","Assuming the URL is in the `file` scheme or similar,\nconvert its path to an absolute `std::path::Path`.",1],[10,"serialize","","Return the serialization of this URL as a string.",1],[10,"serialize_no_fragment","","Return the serialization of this URL, without the fragment identifier, as a string",1],[10,"non_relative_scheme_data","","If the URL is *non-relative*, return the string scheme data.",1],[10,"non_relative_scheme_data_mut","","If the URL is *non-relative*, return a mutable reference to the string scheme data.",1],[10,"relative_scheme_data","","If the URL is in a *relative scheme*, return the structured scheme data.",1],[10,"relative_scheme_data_mut","","If the URL is in a *relative scheme*,\nreturn a mutable reference to the structured scheme data.",1],[10,"username","","If the URL is in a *relative scheme*, return its username.",1],[10,"username_mut","","If the URL is in a *relative scheme*, return a mutable reference to its username.",1],[10,"lossy_percent_decode_username","","Percent-decode the URL’s username, if any.",1],[10,"password","","If the URL is in a *relative scheme*, return its password, if any.",1],[10,"password_mut","","If the URL is in a *relative scheme*, return a mutable reference to its password, if any.",1],[10,"lossy_percent_decode_password","","Percent-decode the URL’s password, if any.",1],[10,"serialize_userinfo","","Serialize the URL's username and password, if any.",1],[10,"host","","If the URL is in a *relative scheme*, return its structured host.",1],[10,"host_mut","","If the URL is in a *relative scheme*, return a mutable reference to its structured host.",1],[10,"domain","","If the URL is in a *relative scheme* and its host is a domain,\nreturn the domain as a string.",1],[10,"domain_mut","","If the URL is in a *relative scheme* and its host is a domain,\nreturn a mutable reference to the domain string.",1],[10,"serialize_host","","If the URL is in a *relative scheme*, serialize its host as a string.",1],[10,"port","","If the URL is in a *relative scheme* and has a port number, return it.",1],[10,"port_mut","","If the URL is in a *relative scheme*, return a mutable reference to its port.",1],[10,"port_or_default","","If the URL is in a *relative scheme* that is not a file-like,\nreturn its port number, even if it is the default.",1],[10,"path","","If the URL is in a *relative scheme*, return its path components.",1],[10,"path_mut","","If the URL is in a *relative scheme*, return a mutable reference to its path components.",1],[10,"serialize_path","","If the URL is in a *relative scheme*, serialize its path as a string.",1],[10,"query_pairs","","Parse the URL’s query string, if any, as `application/x-www-form-urlencoded`\nand return a vector of (key, value) pairs.",1],[10,"set_query_from_pairs","","Serialize an iterator of (key, value) pairs as `application/x-www-form-urlencoded`\nand set it as the URL’s query string.",1],[10,"lossy_percent_decode_query","","Percent-decode the URL’s query string, if any.",1],[10,"lossy_percent_decode_fragment","","Percent-decode the URL’s fragment identifier, if any.",1],[10,"encode","","",1],[10,"decode","","",1],[10,"fmt","","",1],[10,"fmt","","",5],[10,"lossy_percent_decode_username","","Percent-decode the URL’s username.",2],[10,"lossy_percent_decode_password","","Percent-decode the URL’s password, if any.",2],[10,"to_file_path","","Assuming the URL is in the `file` scheme or similar,\nconvert its path to an absolute `std::path::Path`.",2],[10,"domain","","If the host is a domain, return the domain as a string.",2],[10,"domain_mut","","If the host is a domain, return a mutable reference to the domain string.",2],[10,"port_or_default","","Return the port number of the URL, even if it is the default.\nReturn `None` for file-like URLs.",2],[10,"serialize_path","","Serialize the path as a string.",2],[10,"serialize_userinfo","","Serialize the userinfo as a string.",2],[10,"fmt","","",2],[10,"to_url_path","std::path::posix","",13],[10,"to_url_path","std::path::windows","",14],[10,"from_url_path","std::path::posix","",13],[10,"from_url_path","std::path::windows","",14]],"paths":[[1,"Ipv6Address"],[1,"Url"],[1,"RelativeSchemeData"],[2,"Host"],[2,"ParseError"],[2,"SchemeData"],[2,"SchemeType"],[1,"PathFormatter"],[1,"UserInfoFormatter"],[1,"UrlNoFragmentFormatter"],[6,"ToUrlPath"],[6,"FromUrlPath"],[1,"UrlParser"],[1,"Path"],[1,"Path"]]};

searchIndex['libz-sys'] = {"items":[],"paths":[]};

searchIndex['gcc'] = {"items":[[0,"","gcc",""],[1,"Config","","Extra configuration to pass to gcc."],[11,"include_directories","","Directories where gcc will look for header files.",0],[11,"definitions","","Additional definitions (`-DKEY` or `-DKEY=VALUE`).",0],[11,"objects","","Additional object files to link into the final archive",0],[3,"compile_library","","Compile a library from the given set of input C files."],[10,"default","","",0]],"paths":[[1,"Config"]]};

searchIndex['pkg-config'] = {"items":[[0,"","pkg-config",""],[1,"Options","",""],[11,"statik","","",0],[11,"atleast_version","","",0],[3,"find_library","",""],[3,"find_library_opts","",""],[3,"default_options","",""]],"paths":[[1,"Options"]]};

initSearch(searchIndex);
